{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/naive/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/naive/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/naive/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/naive/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/naive/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/naive/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/naive/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/naive/source/images/myicon.JPEG","path":"images/myicon.JPEG","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/naive/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d7a8fda1dc4460218cc07594a5411ba871221c11","modified":1509118923940},{"_id":"source/robots.txt","hash":"fb4af03cd85687453150b89f02827d9fd0298699","modified":1509173400133},{"_id":"source/baidu_verify_5OgYFbhfJP.html","hash":"6516ea04afdb9ff4bb0e1ac7fe295f262917a94e","modified":1509277737730},{"_id":"themes/naive/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1509092986605},{"_id":"themes/naive/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1509092986601},{"_id":"themes/naive/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1509092986603},{"_id":"themes/naive/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1509092986624},{"_id":"themes/naive/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1509092986621},{"_id":"themes/naive/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1509092986629},{"_id":"themes/naive/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1509092986626},{"_id":"themes/naive/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1509092986633},{"_id":"themes/naive/_config.yml","hash":"235e90d763188224bea8c29833c9181f71a4235a","modified":1513563746830},{"_id":"themes/naive/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1509092986636},{"_id":"themes/naive/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1509092986631},{"_id":"themes/naive/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1509092986637},{"_id":"themes/naive/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1509092986645},{"_id":"themes/naive/README.md","hash":"7423256d6e7622434bbfe20c467819687e8e1b27","modified":1509092986641},{"_id":"themes/naive/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1509092986648},{"_id":"themes/naive/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1509092986866},{"_id":"themes/naive/package-lock.json","hash":"cc3e9b232005f824a73555ad6568d566b8aae554","modified":1509092986864},{"_id":"source/_posts/聚类分析（一）：层次聚类算法.md","hash":"8721b2b022a630c3a5620c1fb43fbf7595347736","modified":1513564459595},{"_id":"source/_posts/Python-中的-Unicode-string-和-Byte-string.md","hash":"75808501a089cb6726782eff02b95b83ad877023","modified":1509274825328},{"_id":"source/categories/index.md","hash":"97243f97ee3cd4cb7068093e927bfb542f0a81a0","modified":1509115150701},{"_id":"themes/naive/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1509092986551},{"_id":"source/tags/index.md","hash":"7c4dc23d0360b97d00d7f4f5fc142534fa624c69","modified":1509114840217},{"_id":"themes/naive/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1509092765132},{"_id":"themes/naive/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1509092986581},{"_id":"themes/naive/.git/index","hash":"f87845db430536c2aa18b5ef154c4e96cdd532ae","modified":1509094616460},{"_id":"themes/naive/.git/packed-refs","hash":"7e806b843ef97e9f8b8efdb0ff36b73e9ffc76be","modified":1509092986531},{"_id":"themes/naive/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1509092986609},{"_id":"themes/naive/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1509092986616},{"_id":"themes/naive/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1509092986619},{"_id":"themes/naive/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1509092986612},{"_id":"themes/naive/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1509092986651},{"_id":"themes/naive/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1509092986656},{"_id":"themes/naive/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1509092986662},{"_id":"themes/naive/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1509092986658},{"_id":"themes/naive/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1509092986653},{"_id":"themes/naive/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1509092986667},{"_id":"themes/naive/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1509092986660},{"_id":"themes/naive/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1509092986665},{"_id":"themes/naive/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1509092986669},{"_id":"themes/naive/languages/zh-Hans.yml","hash":"b1a5746e4a23f93dd1b5841928dad1bac1bd810d","modified":1509109658825},{"_id":"themes/naive/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1509092986673},{"_id":"themes/naive/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1509092986679},{"_id":"themes/naive/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1509092986671},{"_id":"themes/naive/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1509092986675},{"_id":"themes/naive/layout/_layout.swig","hash":"7d91c9ca571067a3548d0f3c132b480cd3beb823","modified":1509092986690},{"_id":"themes/naive/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1509092986851},{"_id":"themes/naive/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1509092986847},{"_id":"themes/naive/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1509092986858},{"_id":"themes/naive/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1509092986849},{"_id":"themes/naive/layout/page.swig","hash":"688c940d90cb2ee789190b2b5a40687f7c49adb9","modified":1509108446092},{"_id":"themes/naive/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1509092986682},{"_id":"themes/naive/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1509092986869},{"_id":"themes/naive/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1509092986873},{"_id":"themes/naive/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1509092987531},{"_id":"themes/naive/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1509092986861},{"_id":"themes/naive/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1509092986856},{"_id":"themes/naive/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1509092987536},{"_id":"themes/naive/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1509092987534},{"_id":"themes/naive/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092987168},{"_id":"source/_posts/聚类分析（一）：层次聚类算法/a dendrogram.PNG","hash":"73c06db16d026e6deed32ccd78e93fc0d048db6b","modified":1513162084558},{"_id":"source/_posts/聚类分析（一）：层次聚类算法/illustration_for_hierarchical_clustering.PNG","hash":"288d75122daee04df14c87c890cc2ace92d774c2","modified":1512138460412},{"_id":"themes/naive/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1509092765166},{"_id":"themes/naive/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1509092765142},{"_id":"themes/naive/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1509092765136},{"_id":"themes/naive/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1509092765139},{"_id":"themes/naive/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1509092765144},{"_id":"themes/naive/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1509092765156},{"_id":"themes/naive/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1509092765147},{"_id":"themes/naive/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1509092765153},{"_id":"themes/naive/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1509092765162},{"_id":"themes/naive/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1509092765159},{"_id":"themes/naive/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1509092765150},{"_id":"themes/naive/.git/logs/HEAD","hash":"48cdc18bc8e5648ae112e102d28bf66ab5283cd9","modified":1509092986563},{"_id":"themes/naive/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1509092986686},{"_id":"themes/naive/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1509092986688},{"_id":"themes/naive/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1509092986696},{"_id":"themes/naive/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1509092986694},{"_id":"themes/naive/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1509092986701},{"_id":"themes/naive/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1509092986705},{"_id":"themes/naive/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1509092986703},{"_id":"themes/naive/layout/_macro/post.swig","hash":"5803e553e85dd78c4a664a3edbad8258a07b35ee","modified":1509178519569},{"_id":"themes/naive/layout/_partials/comments.swig","hash":"de45e77e7d52cf317129b7d21415a3002b95b94e","modified":1509092986709},{"_id":"themes/naive/layout/_partials/footer.swig","hash":"e83f892a0189294112ee51def5fb6173403ccdfd","modified":1509182172523},{"_id":"themes/naive/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1509092986713},{"_id":"themes/naive/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1509092986723},{"_id":"themes/naive/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1509092986725},{"_id":"themes/naive/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1509092986720},{"_id":"themes/naive/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1509092986728},{"_id":"themes/naive/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1509092986748},{"_id":"themes/naive/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1509092986750},{"_id":"themes/naive/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1509092986761},{"_id":"themes/naive/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1509092986814},{"_id":"themes/naive/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1509092986816},{"_id":"themes/naive/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1509092986823},{"_id":"themes/naive/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1509092986821},{"_id":"themes/naive/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1509092986818},{"_id":"themes/naive/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1509092986828},{"_id":"themes/naive/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1509092986825},{"_id":"themes/naive/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1509092987166},{"_id":"themes/naive/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1509092987172},{"_id":"themes/naive/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1509092987178},{"_id":"themes/naive/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1509092987174},{"_id":"themes/naive/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1509092987182},{"_id":"themes/naive/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1509092987180},{"_id":"themes/naive/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1509092987194},{"_id":"themes/naive/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1509092987191},{"_id":"themes/naive/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1509092987196},{"_id":"themes/naive/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1509092987202},{"_id":"themes/naive/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1509092987204},{"_id":"themes/naive/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1509092987198},{"_id":"themes/naive/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1509092987200},{"_id":"themes/naive/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509092987211},{"_id":"themes/naive/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509092987207},{"_id":"themes/naive/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1509092987209},{"_id":"themes/naive/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1509092987214},{"_id":"themes/naive/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1509092987216},{"_id":"themes/naive/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1509092987218},{"_id":"themes/naive/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1509092986876},{"_id":"themes/naive/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1509092986878},{"_id":"themes/naive/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1509092986880},{"_id":"themes/naive/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1509092986885},{"_id":"themes/naive/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1509092986887},{"_id":"themes/naive/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1509092986889},{"_id":"themes/naive/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1509092986892},{"_id":"themes/naive/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1509092986882},{"_id":"themes/naive/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1509092986894},{"_id":"themes/naive/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092986758},{"_id":"themes/naive/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092986757},{"_id":"themes/naive/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092987084},{"_id":"themes/naive/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092987085},{"_id":"themes/naive/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092987091},{"_id":"themes/naive/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092987158},{"_id":"themes/naive/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509092987164},{"_id":"themes/naive/source/images/myicon.JPEG","hash":"fda640d647f76083c5dc732a4ef3ce48d7943e5a","modified":1509103758865},{"_id":"themes/naive/.git/refs/heads/master","hash":"189b4966e0f0f45b56b68ab8930aaba51e2cf14d","modified":1509092986560},{"_id":"themes/naive/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1509092986716},{"_id":"themes/naive/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1509092986718},{"_id":"themes/naive/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1509092986731},{"_id":"themes/naive/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1509092986734},{"_id":"themes/naive/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1509092986737},{"_id":"themes/naive/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1509092986739},{"_id":"themes/naive/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1509092986742},{"_id":"themes/naive/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1509092986752},{"_id":"themes/naive/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1509092986744},{"_id":"themes/naive/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1509092986755},{"_id":"themes/naive/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1509092986733},{"_id":"themes/naive/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1509092986759},{"_id":"themes/naive/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1509092986796},{"_id":"themes/naive/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1509092986799},{"_id":"themes/naive/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1509092986807},{"_id":"themes/naive/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1509092986794},{"_id":"themes/naive/layout/_third-party/comments/valine.swig","hash":"1b492d528a7d48216d4548011000fced2f4a538d","modified":1509092986809},{"_id":"themes/naive/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1509092986803},{"_id":"themes/naive/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1509092986801},{"_id":"themes/naive/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1509092986766},{"_id":"themes/naive/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1509092986805},{"_id":"themes/naive/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1509092986768},{"_id":"themes/naive/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1509092986812},{"_id":"themes/naive/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1509092986778},{"_id":"themes/naive/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1509092986775},{"_id":"themes/naive/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1509092986773},{"_id":"themes/naive/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1509092986782},{"_id":"themes/naive/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1509092986770},{"_id":"themes/naive/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1509092986780},{"_id":"themes/naive/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1509092986786},{"_id":"themes/naive/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1509092986784},{"_id":"themes/naive/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1509092986789},{"_id":"themes/naive/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1509092986791},{"_id":"themes/naive/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1509092986836},{"_id":"themes/naive/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1509092986841},{"_id":"themes/naive/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1509092986838},{"_id":"themes/naive/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1509092986844},{"_id":"themes/naive/source/css/_custom/custom.styl","hash":"c2dfb8c1490ecb7b19127bce5f7cd2760ea5754d","modified":1509117067545},{"_id":"themes/naive/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1509092987082},{"_id":"themes/naive/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1509092987087},{"_id":"themes/naive/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1509092987090},{"_id":"themes/naive/source/css/_variables/Mist.styl","hash":"f3c2b739d978100cecf023cfaeab93e65a70142e","modified":1509116298017},{"_id":"themes/naive/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1509092987155},{"_id":"themes/naive/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1509092987161},{"_id":"themes/naive/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1509092987163},{"_id":"themes/naive/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1509092987228},{"_id":"themes/naive/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1509092987225},{"_id":"themes/naive/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1509092987231},{"_id":"themes/naive/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1509092987223},{"_id":"themes/naive/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1509092987238},{"_id":"themes/naive/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1509092987233},{"_id":"themes/naive/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1509092987246},{"_id":"themes/naive/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1509092987235},{"_id":"themes/naive/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1509092987250},{"_id":"themes/naive/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1509092987240},{"_id":"themes/naive/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1509092987248},{"_id":"themes/naive/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1509092987285},{"_id":"themes/naive/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1509092987294},{"_id":"themes/naive/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1509092987301},{"_id":"themes/naive/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1509092987303},{"_id":"themes/naive/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1509092987345},{"_id":"themes/naive/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1509092987351},{"_id":"themes/naive/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1509092987350},{"_id":"themes/naive/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1509092987348},{"_id":"themes/naive/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1509092987413},{"_id":"themes/naive/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1509092987363},{"_id":"themes/naive/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1509092987297},{"_id":"themes/naive/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1509092987367},{"_id":"themes/naive/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1509092987369},{"_id":"themes/naive/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1509092987360},{"_id":"themes/naive/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1509092987365},{"_id":"themes/naive/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1509092987429},{"_id":"themes/naive/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1509092987431},{"_id":"themes/naive/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1509092987421},{"_id":"themes/naive/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1509092987424},{"_id":"themes/naive/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1509092987434},{"_id":"themes/naive/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1509092987427},{"_id":"themes/naive/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1509092987439},{"_id":"themes/naive/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1509092987441},{"_id":"themes/naive/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1509092987444},{"_id":"themes/naive/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1509092987481},{"_id":"themes/naive/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1509092987483},{"_id":"themes/naive/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1509092987504},{"_id":"themes/naive/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1509092987486},{"_id":"themes/naive/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1509092987507},{"_id":"themes/naive/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1509092987514},{"_id":"themes/naive/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1509092987527},{"_id":"themes/naive/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1509092987449},{"_id":"themes/naive/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1509092987524},{"_id":"themes/naive/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1509092987451},{"_id":"themes/naive/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1509092987447},{"_id":"themes/naive/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1509092987456},{"_id":"themes/naive/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1509092987466},{"_id":"themes/naive/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1509092987459},{"_id":"themes/naive/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1509092987462},{"_id":"themes/naive/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1509092987464},{"_id":"themes/naive/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1509092987454},{"_id":"themes/naive/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1509092987468},{"_id":"themes/naive/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1509092987475},{"_id":"themes/naive/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1509092987470},{"_id":"themes/naive/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1509092987472},{"_id":"themes/naive/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1509092987478},{"_id":"themes/naive/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1509092987417},{"_id":"themes/naive/.git/logs/refs/heads/master","hash":"48cdc18bc8e5648ae112e102d28bf66ab5283cd9","modified":1509092986567},{"_id":"themes/naive/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1509092986545},{"_id":"themes/naive/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1509092986834},{"_id":"themes/naive/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1509092986904},{"_id":"themes/naive/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1509092986908},{"_id":"themes/naive/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1509092986906},{"_id":"themes/naive/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1509092986902},{"_id":"themes/naive/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1509092986910},{"_id":"themes/naive/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1509092986832},{"_id":"themes/naive/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1509092986949},{"_id":"themes/naive/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1509092987013},{"_id":"themes/naive/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1509092987062},{"_id":"themes/naive/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1509092987065},{"_id":"themes/naive/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1509092987067},{"_id":"themes/naive/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1509092987072},{"_id":"themes/naive/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1509092987075},{"_id":"themes/naive/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1509092987077},{"_id":"themes/naive/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1509092987070},{"_id":"themes/naive/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1509092987124},{"_id":"themes/naive/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1509092987126},{"_id":"themes/naive/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1509092987131},{"_id":"themes/naive/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1509092987133},{"_id":"themes/naive/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1509092987129},{"_id":"themes/naive/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1509092987099},{"_id":"themes/naive/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1509092987104},{"_id":"themes/naive/source/css/_schemes/Mist/_posts-expanded.styl","hash":"1ec021d0e4851515d1846f15e70fdaea3459997f","modified":1509116062042},{"_id":"themes/naive/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1509092987110},{"_id":"themes/naive/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1509092987106},{"_id":"themes/naive/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1509092987113},{"_id":"themes/naive/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1509092987101},{"_id":"themes/naive/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1509092987140},{"_id":"themes/naive/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1509092987146},{"_id":"themes/naive/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1509092987151},{"_id":"themes/naive/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1509092987097},{"_id":"themes/naive/source/css/_schemes/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1509092987149},{"_id":"themes/naive/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1509092987144},{"_id":"themes/naive/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1509092987142},{"_id":"themes/naive/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1509092987244},{"_id":"themes/naive/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509092987307},{"_id":"themes/naive/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1509092987273},{"_id":"themes/naive/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1509092987279},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509092987309},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509092987311},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509092987313},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509092987315},{"_id":"themes/naive/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1509092987282},{"_id":"themes/naive/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1509092987341},{"_id":"themes/naive/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1509092987356},{"_id":"themes/naive/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509092987318},{"_id":"themes/naive/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1509092987339},{"_id":"themes/naive/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1509092987336},{"_id":"themes/naive/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1509092987354},{"_id":"themes/naive/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1509092987373},{"_id":"themes/naive/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1509092987379},{"_id":"themes/naive/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1509092987376},{"_id":"themes/naive/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1509092987499},{"_id":"themes/naive/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1509092987501},{"_id":"themes/naive/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1509092987276},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509092987410},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509092987406},{"_id":"themes/naive/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1509092987512},{"_id":"themes/naive/.git/logs/refs/remotes/origin/HEAD","hash":"48cdc18bc8e5648ae112e102d28bf66ab5283cd9","modified":1509092986545},{"_id":"themes/naive/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1509092986916},{"_id":"themes/naive/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1509092986924},{"_id":"themes/naive/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1509092986921},{"_id":"themes/naive/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1509092986926},{"_id":"themes/naive/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1509092986913},{"_id":"themes/naive/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1509092986929},{"_id":"themes/naive/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1509092986933},{"_id":"themes/naive/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1509092986939},{"_id":"themes/naive/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1509092986944},{"_id":"themes/naive/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1509092986946},{"_id":"themes/naive/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1509092986931},{"_id":"themes/naive/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1509092986941},{"_id":"themes/naive/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1509092986955},{"_id":"themes/naive/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1509092986957},{"_id":"themes/naive/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1509092986959},{"_id":"themes/naive/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1509092986962},{"_id":"themes/naive/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1509092986953},{"_id":"themes/naive/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1509092986936},{"_id":"themes/naive/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1509092986967},{"_id":"themes/naive/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1509092986964},{"_id":"themes/naive/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1509092986975},{"_id":"themes/naive/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1509092986977},{"_id":"themes/naive/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1509092986980},{"_id":"themes/naive/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1509092986982},{"_id":"themes/naive/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1509092986986},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1509092986989},{"_id":"themes/naive/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1509092986984},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1509092986992},{"_id":"themes/naive/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1509092986970},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1509092986994},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1509092986998},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1509092987000},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1509092986996},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1509092987003},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1509092987008},{"_id":"themes/naive/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1509092987011},{"_id":"themes/naive/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1509092987043},{"_id":"themes/naive/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1509092987041},{"_id":"themes/naive/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1509092987005},{"_id":"themes/naive/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1509092986918},{"_id":"themes/naive/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1509092987047},{"_id":"themes/naive/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1509092987055},{"_id":"themes/naive/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1509092987045},{"_id":"themes/naive/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1509092987057},{"_id":"themes/naive/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1509092987052},{"_id":"themes/naive/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1509092987060},{"_id":"themes/naive/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1509092987016},{"_id":"themes/naive/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1509092987018},{"_id":"themes/naive/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1509092987020},{"_id":"themes/naive/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1509092987023},{"_id":"themes/naive/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1509092987025},{"_id":"themes/naive/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1509092987050},{"_id":"themes/naive/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1509092987033},{"_id":"themes/naive/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1509092987035},{"_id":"themes/naive/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1509092987030},{"_id":"themes/naive/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1509092987136},{"_id":"themes/naive/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1509092987117},{"_id":"themes/naive/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1509092987120},{"_id":"themes/naive/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1509092987039},{"_id":"themes/naive/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1509092986972},{"_id":"themes/naive/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1509092987261},{"_id":"themes/naive/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1509092987028},{"_id":"themes/naive/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1509092987258},{"_id":"themes/naive/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1509092987269},{"_id":"themes/naive/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1509092987264},{"_id":"themes/naive/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1509092987267},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1509092987324},{"_id":"themes/naive/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509092987321},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1509092987327},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1509092987329},{"_id":"themes/naive/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509092987385},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1509092987331},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509092987402},{"_id":"themes/naive/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1509092987334},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509092987390},{"_id":"themes/naive/.git/objects/pack/pack-62c09db03b710ea3ca3d838ec13fd7d3eaa8a008.idx","hash":"021db5ecf39ac50deff100843f7bba82d4f4c733","modified":1509092986450},{"_id":"themes/naive/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1509092987291},{"_id":"themes/naive/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1509092987493},{"_id":"themes/naive/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1509092987397},{"_id":"themes/naive/.git/objects/pack/pack-62c09db03b710ea3ca3d838ec13fd7d3eaa8a008.pack","hash":"f0b4ab5c2e27b32ea6973b248399a7a955df7b82","modified":1509092986453},{"_id":"public/baidu_verify_5OgYFbhfJP.html","hash":"74fe866c3ed7fc49318f99a7df8a3c918392e53b","modified":1513563768340},{"_id":"public/atom.xml","hash":"9f2872c52a27d17a49292aa127105354cdeaca89","modified":1513564477286},{"_id":"public/search.xml","hash":"7c74832162ecf1851b2236e8afedfe4749bce952","modified":1513564477306},{"_id":"public/sitemap.xml","hash":"68d3214c18b4847546aade85b3dc43cd53ebd9ec","modified":1513564477307},{"_id":"public/baidusitemap.xml","hash":"aa3d421fb2ad1e0275774999d1d3d99eab6826d1","modified":1513564477242},{"_id":"public/聚类分析（一）：层次聚类算法/index.html","hash":"cafed827612be549cfcdd11b89df452d141ee7f8","modified":1513564477385},{"_id":"public/tags/index.html","hash":"c2ef8d6278e9fa7db7cd78d6d8e3d21a9f32f9be","modified":1513563768507},{"_id":"public/categories/index.html","hash":"1a0b2c2727cedac476c98b2bfe715bd25e9bc462","modified":1513564477383},{"_id":"public/Python-中的-Unicode-string-和-Byte-string/index.html","hash":"e2a4b11f07863d5b883a3a78c16321e441ccd982","modified":1513563768508},{"_id":"public/archives/index.html","hash":"0b4e8ab12b9bf23f2c0f6637920585686da86823","modified":1513563768508},{"_id":"public/archives/2017/index.html","hash":"44a909b866181e267714789a67ee4ce08d6d1d3f","modified":1513563768508},{"_id":"public/archives/2017/10/index.html","hash":"915474d2229838945bf7949ce8e4ec00cf08ea7e","modified":1513563768510},{"_id":"public/archives/2017/12/index.html","hash":"4fa918e2ecdbaa454f4f4202f7ee302ab9b226ea","modified":1513563768510},{"_id":"public/index.html","hash":"890a25e14711d72e627668ce606b404d12f71048","modified":1513564477387},{"_id":"public/categories/python-notes/index.html","hash":"5e7884e61b5cf5e2b4a7de87d9c6532d9625eda4","modified":1513563768510},{"_id":"public/tags/聚类/index.html","hash":"027a1214cede4207d28d20ff32707dd82763e4f4","modified":1513563768510},{"_id":"public/tags/非监督学习/index.html","hash":"fa78cc6b3c56ec72c66ceb1f965f2fc115070a9a","modified":1513563768510},{"_id":"public/tags/层次聚类/index.html","hash":"5ca9632edbfa052b420a18992e62a06d1a4619bc","modified":1513563768510},{"_id":"public/tags/unicode/index.html","hash":"83fc7b9dad51849d572eb110268a82c47f74bf1e","modified":1513563768511},{"_id":"public/tags/python/index.html","hash":"cf243461696d0d40403a3ee4e67bf8063224209c","modified":1513563768511},{"_id":"public/categories/machine-learning-algorithms/index.html","hash":"f83532677829dbc24e5fba4c01a5715eeebd5377","modified":1513563768545},{"_id":"public/robots.txt","hash":"fb4af03cd85687453150b89f02827d9fd0298699","modified":1513563768545},{"_id":"public/CNAME","hash":"d7a8fda1dc4460218cc07594a5411ba871221c11","modified":1513563768545},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513563768546},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1513563768546},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1513563768546},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1513563768546},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1513563768546},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1513563768547},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1513563768547},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1513563768547},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1513563768547},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1513563768547},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1513563768547},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513563768548},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1513563768548},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513563768548},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1513563768548},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1513563768548},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1513563768548},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513563768548},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1513563769426},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1513563769426},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513563769428},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513563769428},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513563769428},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513563769428},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513563769428},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513563769428},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1513563769428},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1513563769428},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1513563769428},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1513563769429},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1513563769429},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1513563769429},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513563769429},{"_id":"public/聚类分析（一）：层次聚类算法/a dendrogram.PNG","hash":"73c06db16d026e6deed32ccd78e93fc0d048db6b","modified":1513563769429},{"_id":"public/聚类分析（一）：层次聚类算法/illustration_for_hierarchical_clustering.PNG","hash":"288d75122daee04df14c87c890cc2ace92d774c2","modified":1513563769429},{"_id":"public/images/myicon.JPEG","hash":"fda640d647f76083c5dc732a4ef3ce48d7943e5a","modified":1513563769429},{"_id":"public/css/main.css","hash":"c5b7f29bda78bebb25a30ba58bcdb015916782ee","modified":1513563769474},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513563769487},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513563769500},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513563769511},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1513563769511},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1513563769511},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1513563769511},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513563769511},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1513563769511},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1513563769511},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1513563769511},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1513563769511},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1513563769511},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1513563769511},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513563769511},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1513563769512},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1513563769512},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1513563769512},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1513563769512},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513563769512},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513563769512},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1513563769512},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1513563769512},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513563769512},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1513563769512},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1513563769512},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1513563769512},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1513563769512},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1513563769513},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1513563769513},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1513563769513},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1513563769513},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513563769513},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513563769513},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513563769513},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513563769513},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513563769513},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513563769514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513563769514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513563769514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513563769514},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1513563769514},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"9df01e3b445243c09f505b203d9175e3780c2496","modified":1513563769514},{"_id":"public/lib/jquery_lazyload/README.html","hash":"1751c05235b6ab4b10b87b0e007592232115be9a","modified":1513563769514},{"_id":"public/lib/fastclick/README.html","hash":"04bf54f267c7ac7e592c5a6baeaac404682af603","modified":1513563769514},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1513563769514},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1513563769514},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1513563769514},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1513563769514},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1513563769514},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513563769514},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513563769514},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1513563769514},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513563769514},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1513563769514},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513563769515},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1513563769515},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513563769515},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1513563769515},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513563769516},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513563769516},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513563769516},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1513563769516},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1513563769516},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1513563769517},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513563769517},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513563769517},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513563769518},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1513563769543}],"Category":[{"name":"机器学习算法","_id":"cjbbkscjp000530nllvbw7kia"},{"name":"python学习笔记","_id":"cjbbkscjt000730nln36aozo6"}],"Data":[],"Page":[{"layout":"false","sitemap":false,"_content":"5OgYFbhfJP","source":"baidu_verify_5OgYFbhfJP.html","raw":"layout: false\nsitemap: false\n---\n5OgYFbhfJP","date":"2017-10-29T11:48:57.730Z","updated":"2017-10-29T11:48:57.730Z","path":"baidu_verify_5OgYFbhfJP.html","title":"","comments":1,"_id":"cjbbkscfi000030nlo59nbqxk","content":"5OgYFbhfJP","site":{"data":{}},"excerpt":"","more":"5OgYFbhfJP"},{"title":"分类","date":"2017-10-27T12:57:03.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-10-27 20:57:03\ntype: 'categories'\ncomments: false\n---\n","updated":"2017-10-27T14:39:10.701Z","path":"categories/index.html","layout":"page","_id":"cjbbkscix000130nlvm28apm8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-10-27T12:56:41.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-10-27 20:56:41\ntype: 'tags'\ncomments: false\n---\n","updated":"2017-10-27T14:34:00.217Z","path":"tags/index.html","layout":"page","_id":"cjbbkscj9000330nlgxlfmg2f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"聚类分析（一）：层次聚类算法","layout":"post","date":"2017-12-01T12:59:23.000Z","keywords":"聚类,层次聚类,非监督学习,clustering,machine learning","_content":"\n# 聚类算法综述 #\n聚类分析（clustering analysis）是将一组对象根据其特征分成不同的 `cluster`，使得同一 `cluster` 内的对象在某种意义上比不同的 `cluster` 之间的对象更为相似。\n由于 \"`cluster`\" 没有一个明确的定义，因而会有基于不同的模型的聚类算法，其中被广泛运用的聚类算法有以下几类：\n- 基于**连通模型**（connectivity-based）的聚类算法： 即本文将要讲述的**层次聚类**算法，其核心思想是按照对象之间的距离来聚类，两个离的近的对象要比两个离的远的对象更有可能属于同一 `cluster`。\n- 基于**中心点模型**（centroid-based）的聚类算法： 在此类算法中，每个 `cluster` 都维持一个中心点（centorid），该中心点不一定属于给定的数据集。当预先指定聚类数目 `k` 时，此类算法需要解决一个优化问题，目标函数为所有的对象距其所属的 `cluster` 的中心点的距离的平方和，优化变量为每个 `cluster` 的中心点以及每个对象属于哪个 `cluster`；此优化问题被证明是 NP-hard 的，但有一些迭代算法可以找到近似解，k-means 算法即是其中的一种。\n- 基于**分布模型**（distribution-based）的聚类算法： 此类算法认为数据集的中数据是由一种混合概率模型所采样得到的，因而只要将可能属于同一概率分布所产生的数据归为同一 `cluster` 即可。\n- 基于**密度**（density-based）的聚类算法： 在此类算法中，密度高的区域被归为一个 `cluster`，`cluster` 之间由密度低的区域隔开，密度低的区域中的点被认为是噪声 （noise），常用的密度聚类算法为 DBSCAN 和 OPTICS。\n\n------------\n# 层次聚类综述 #\n层次聚类算法 (hierarchical clustering) 将数据集划分为一层一层的 `clusters`，后面一层生成的 `clusters` 基于前面一层的结果。层次聚类算法一般分为两类：\n- Agglomerative 层次聚类：又称自底向上（bottom-up）的层次聚类，每一个对象最开始都是一个 `cluster`，每次按一定的准则将最相近的两个 `cluster` 合并生成一个新的 `cluster`，如此往复，直至最终所有的对象都属于一个 `cluster`。本文主要关注此类算法。\n- Divisive 层次聚类： 又称自顶向下（top-down）的层次聚类，最开始所有的对象均属于一个 `cluster`，每次按一定的准则将某个 `cluster` 划分为多个 `cluster`，如此往复，直至每个对象均是一个 `cluster`。\n\n下图直观的给出了层次聚类的思想以及以上两种聚类策略的异同。\n<div align = center>\n<img src=\"https://i.imgur.com/hiVWi9R.png\" width = \"500\" height = \"400\" alt = \"层次聚类图示\" align = center />\n</div>\n\n另外，需指出的是，层次聚类算法是一种贪心算法（greedy algorithm），因其每一次合并或划分都是基于某种局部最优的选择。\n\n## 树形图 ##\n树形图（dendrogram）可以直观地表示层次聚类的成果。一个有 `5` 个点的树形图如下图所示，其中纵坐标高度表示不同的 `cluster` 之间的距离（“距离”的衡量准则可以多种多样，详见本文后面的定义），可以从这张图看到，\\\\( x\\_1 \\\\) 和 \\\\( x\\_2 \\\\) 的距离最近（为 `1`），因此将 \\\\( x\\_1 \\\\) 和 \\\\( x\\_2 \\\\) 合并为一个 cluster \\\\( (x\\_1, x\\_2) \\\\)，所以在树形图中首先将节点 \\\\( x\\_1 \\\\) 和 \\\\( x\\_2 \\\\) 连接，使其成为一个新的节点  \\\\( (x\\_1, x\\_2) \\\\) 的子节点，并将这个新的节点的高度置为 `1`；之后再在剩下的 `4` 个 `cluster` \\\\( (x\\_1, x\\_2) \\\\)， \\\\( x\\_3 \\\\)， \\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 中选取距离最近的两个 `cluster` 合并，\\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 的距离最近（为 `2`），因此将 \\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 合并为一个 cluster \\\\( (x\\_4, x\\_5) \\\\)，体现在树形图上，是将节点 \\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 连接，使其成为一个新的节点 \\\\( (x\\_4, x\\_5) \\\\) 的子节点，并将此新节点的高度置为 `2`；....依次模式进行树形图的生成，直至最终只剩下一个 `cluster` \\\\( ((x\\_1, x\\_2), x\\_3), (x\\_4, x\\_5)) \\\\)。\n可以直观地看到，如果我们想得到一个聚类结果，使任意的两个 `cluster` 之间的距离都不大于 \\\\( h \\\\)，我们只要在树形图上作一条水平的直线对其进行切割，使其纵坐标等于 \\\\( h \\\\)，即可获得对应的聚类结果。例如，在下面的树形图中，设 \\\\( h=2.5 \\\\)，即可得到 `3` 个 `cluster` \\\\( (x\\_1, x\\_2) \\\\)， \\\\( x\\_3 \\\\) 和 \\\\( (x\\_4, x\\_5) \\\\)。\n<div align = center>\n<img src=\"https://i.imgur.com/Ag5A0Io.png\" width = \"500\" height = \"400\" alt = \"树形图示例\" align = center />\n</div>\n\n## 对象之间的距离衡量 ##\n\n\n\n\n","source":"_posts/聚类分析（一）：层次聚类算法.md","raw":"---\ntitle: 聚类分析（一）：层次聚类算法\nlayout: post\ndate: 2017-12-01 20:59:23\ntags:\n- 聚类\n- 非监督学习\n- 层次聚类\ncategories:\n- 机器学习算法\nkeywords: 聚类,层次聚类,非监督学习,clustering,machine learning\n---\n\n# 聚类算法综述 #\n聚类分析（clustering analysis）是将一组对象根据其特征分成不同的 `cluster`，使得同一 `cluster` 内的对象在某种意义上比不同的 `cluster` 之间的对象更为相似。\n由于 \"`cluster`\" 没有一个明确的定义，因而会有基于不同的模型的聚类算法，其中被广泛运用的聚类算法有以下几类：\n- 基于**连通模型**（connectivity-based）的聚类算法： 即本文将要讲述的**层次聚类**算法，其核心思想是按照对象之间的距离来聚类，两个离的近的对象要比两个离的远的对象更有可能属于同一 `cluster`。\n- 基于**中心点模型**（centroid-based）的聚类算法： 在此类算法中，每个 `cluster` 都维持一个中心点（centorid），该中心点不一定属于给定的数据集。当预先指定聚类数目 `k` 时，此类算法需要解决一个优化问题，目标函数为所有的对象距其所属的 `cluster` 的中心点的距离的平方和，优化变量为每个 `cluster` 的中心点以及每个对象属于哪个 `cluster`；此优化问题被证明是 NP-hard 的，但有一些迭代算法可以找到近似解，k-means 算法即是其中的一种。\n- 基于**分布模型**（distribution-based）的聚类算法： 此类算法认为数据集的中数据是由一种混合概率模型所采样得到的，因而只要将可能属于同一概率分布所产生的数据归为同一 `cluster` 即可。\n- 基于**密度**（density-based）的聚类算法： 在此类算法中，密度高的区域被归为一个 `cluster`，`cluster` 之间由密度低的区域隔开，密度低的区域中的点被认为是噪声 （noise），常用的密度聚类算法为 DBSCAN 和 OPTICS。\n\n------------\n# 层次聚类综述 #\n层次聚类算法 (hierarchical clustering) 将数据集划分为一层一层的 `clusters`，后面一层生成的 `clusters` 基于前面一层的结果。层次聚类算法一般分为两类：\n- Agglomerative 层次聚类：又称自底向上（bottom-up）的层次聚类，每一个对象最开始都是一个 `cluster`，每次按一定的准则将最相近的两个 `cluster` 合并生成一个新的 `cluster`，如此往复，直至最终所有的对象都属于一个 `cluster`。本文主要关注此类算法。\n- Divisive 层次聚类： 又称自顶向下（top-down）的层次聚类，最开始所有的对象均属于一个 `cluster`，每次按一定的准则将某个 `cluster` 划分为多个 `cluster`，如此往复，直至每个对象均是一个 `cluster`。\n\n下图直观的给出了层次聚类的思想以及以上两种聚类策略的异同。\n<div align = center>\n<img src=\"https://i.imgur.com/hiVWi9R.png\" width = \"500\" height = \"400\" alt = \"层次聚类图示\" align = center />\n</div>\n\n另外，需指出的是，层次聚类算法是一种贪心算法（greedy algorithm），因其每一次合并或划分都是基于某种局部最优的选择。\n\n## 树形图 ##\n树形图（dendrogram）可以直观地表示层次聚类的成果。一个有 `5` 个点的树形图如下图所示，其中纵坐标高度表示不同的 `cluster` 之间的距离（“距离”的衡量准则可以多种多样，详见本文后面的定义），可以从这张图看到，\\\\( x\\_1 \\\\) 和 \\\\( x\\_2 \\\\) 的距离最近（为 `1`），因此将 \\\\( x\\_1 \\\\) 和 \\\\( x\\_2 \\\\) 合并为一个 cluster \\\\( (x\\_1, x\\_2) \\\\)，所以在树形图中首先将节点 \\\\( x\\_1 \\\\) 和 \\\\( x\\_2 \\\\) 连接，使其成为一个新的节点  \\\\( (x\\_1, x\\_2) \\\\) 的子节点，并将这个新的节点的高度置为 `1`；之后再在剩下的 `4` 个 `cluster` \\\\( (x\\_1, x\\_2) \\\\)， \\\\( x\\_3 \\\\)， \\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 中选取距离最近的两个 `cluster` 合并，\\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 的距离最近（为 `2`），因此将 \\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 合并为一个 cluster \\\\( (x\\_4, x\\_5) \\\\)，体现在树形图上，是将节点 \\\\( x\\_4 \\\\) 和 \\\\( x\\_5 \\\\) 连接，使其成为一个新的节点 \\\\( (x\\_4, x\\_5) \\\\) 的子节点，并将此新节点的高度置为 `2`；....依次模式进行树形图的生成，直至最终只剩下一个 `cluster` \\\\( ((x\\_1, x\\_2), x\\_3), (x\\_4, x\\_5)) \\\\)。\n可以直观地看到，如果我们想得到一个聚类结果，使任意的两个 `cluster` 之间的距离都不大于 \\\\( h \\\\)，我们只要在树形图上作一条水平的直线对其进行切割，使其纵坐标等于 \\\\( h \\\\)，即可获得对应的聚类结果。例如，在下面的树形图中，设 \\\\( h=2.5 \\\\)，即可得到 `3` 个 `cluster` \\\\( (x\\_1, x\\_2) \\\\)， \\\\( x\\_3 \\\\) 和 \\\\( (x\\_4, x\\_5) \\\\)。\n<div align = center>\n<img src=\"https://i.imgur.com/Ag5A0Io.png\" width = \"500\" height = \"400\" alt = \"树形图示例\" align = center />\n</div>\n\n## 对象之间的距离衡量 ##\n\n\n\n\n","slug":"聚类分析（一）：层次聚类算法","published":1,"updated":"2017-12-18T02:34:19.595Z","_id":"cjbbkscj0000230nlry61fsbl","comments":1,"photos":[],"link":"","content":"<h1 id=\"聚类算法综述\"><a href=\"#聚类算法综述\" class=\"headerlink\" title=\"聚类算法综述\"></a>聚类算法综述</h1><p>聚类分析（clustering analysis）是将一组对象根据其特征分成不同的 <code>cluster</code>，使得同一 <code>cluster</code> 内的对象在某种意义上比不同的 <code>cluster</code> 之间的对象更为相似。<br>由于 “<code>cluster</code>“ 没有一个明确的定义，因而会有基于不同的模型的聚类算法，其中被广泛运用的聚类算法有以下几类：</p>\n<ul>\n<li>基于<strong>连通模型</strong>（connectivity-based）的聚类算法： 即本文将要讲述的<strong>层次聚类</strong>算法，其核心思想是按照对象之间的距离来聚类，两个离的近的对象要比两个离的远的对象更有可能属于同一 <code>cluster</code>。</li>\n<li>基于<strong>中心点模型</strong>（centroid-based）的聚类算法： 在此类算法中，每个 <code>cluster</code> 都维持一个中心点（centorid），该中心点不一定属于给定的数据集。当预先指定聚类数目 <code>k</code> 时，此类算法需要解决一个优化问题，目标函数为所有的对象距其所属的 <code>cluster</code> 的中心点的距离的平方和，优化变量为每个 <code>cluster</code> 的中心点以及每个对象属于哪个 <code>cluster</code>；此优化问题被证明是 NP-hard 的，但有一些迭代算法可以找到近似解，k-means 算法即是其中的一种。</li>\n<li>基于<strong>分布模型</strong>（distribution-based）的聚类算法： 此类算法认为数据集的中数据是由一种混合概率模型所采样得到的，因而只要将可能属于同一概率分布所产生的数据归为同一 <code>cluster</code> 即可。</li>\n<li>基于<strong>密度</strong>（density-based）的聚类算法： 在此类算法中，密度高的区域被归为一个 <code>cluster</code>，<code>cluster</code> 之间由密度低的区域隔开，密度低的区域中的点被认为是噪声 （noise），常用的密度聚类算法为 DBSCAN 和 OPTICS。</li>\n</ul>\n<hr>\n<h1 id=\"层次聚类综述\"><a href=\"#层次聚类综述\" class=\"headerlink\" title=\"层次聚类综述\"></a>层次聚类综述</h1><p>层次聚类算法 (hierarchical clustering) 将数据集划分为一层一层的 <code>clusters</code>，后面一层生成的 <code>clusters</code> 基于前面一层的结果。层次聚类算法一般分为两类：</p>\n<ul>\n<li>Agglomerative 层次聚类：又称自底向上（bottom-up）的层次聚类，每一个对象最开始都是一个 <code>cluster</code>，每次按一定的准则将最相近的两个 <code>cluster</code> 合并生成一个新的 <code>cluster</code>，如此往复，直至最终所有的对象都属于一个 <code>cluster</code>。本文主要关注此类算法。</li>\n<li>Divisive 层次聚类： 又称自顶向下（top-down）的层次聚类，最开始所有的对象均属于一个 <code>cluster</code>，每次按一定的准则将某个 <code>cluster</code> 划分为多个 <code>cluster</code>，如此往复，直至每个对象均是一个 <code>cluster</code>。</li>\n</ul>\n<p>下图直观的给出了层次聚类的思想以及以上两种聚类策略的异同。</p>\n<div align=\"center\"><br><img src=\"https://i.imgur.com/hiVWi9R.png\" width=\"500\" height=\"400\" alt=\"层次聚类图示\" align=\"center\"><br></div>\n\n<p>另外，需指出的是，层次聚类算法是一种贪心算法（greedy algorithm），因其每一次合并或划分都是基于某种局部最优的选择。</p>\n<h2 id=\"树形图\"><a href=\"#树形图\" class=\"headerlink\" title=\"树形图\"></a>树形图</h2><p>树形图（dendrogram）可以直观地表示层次聚类的成果。一个有 <code>5</code> 个点的树形图如下图所示，其中纵坐标高度表示不同的 <code>cluster</code> 之间的距离（“距离”的衡量准则可以多种多样，详见本文后面的定义），可以从这张图看到，\\( x_1 \\) 和 \\( x_2 \\) 的距离最近（为 <code>1</code>），因此将 \\( x_1 \\) 和 \\( x_2 \\) 合并为一个 cluster \\( (x_1, x_2) \\)，所以在树形图中首先将节点 \\( x_1 \\) 和 \\( x_2 \\) 连接，使其成为一个新的节点  \\( (x_1, x_2) \\) 的子节点，并将这个新的节点的高度置为 <code>1</code>；之后再在剩下的 <code>4</code> 个 <code>cluster</code> \\( (x_1, x_2) \\)， \\( x_3 \\)， \\( x_4 \\) 和 \\( x_5 \\) 中选取距离最近的两个 <code>cluster</code> 合并，\\( x_4 \\) 和 \\( x_5 \\) 的距离最近（为 <code>2</code>），因此将 \\( x_4 \\) 和 \\( x_5 \\) 合并为一个 cluster \\( (x_4, x_5) \\)，体现在树形图上，是将节点 \\( x_4 \\) 和 \\( x_5 \\) 连接，使其成为一个新的节点 \\( (x_4, x_5) \\) 的子节点，并将此新节点的高度置为 <code>2</code>；….依次模式进行树形图的生成，直至最终只剩下一个 <code>cluster</code> \\( ((x_1, x_2), x_3), (x_4, x_5)) \\)。<br>可以直观地看到，如果我们想得到一个聚类结果，使任意的两个 <code>cluster</code> 之间的距离都不大于 \\( h \\)，我们只要在树形图上作一条水平的直线对其进行切割，使其纵坐标等于 \\( h \\)，即可获得对应的聚类结果。例如，在下面的树形图中，设 \\( h=2.5 \\)，即可得到 <code>3</code> 个 <code>cluster</code> \\( (x_1, x_2) \\)， \\( x_3 \\) 和 \\( (x_4, x_5) \\)。</p>\n<div align=\"center\"><br><img src=\"https://i.imgur.com/Ag5A0Io.png\" width=\"500\" height=\"400\" alt=\"树形图示例\" align=\"center\"><br></div>\n\n<h2 id=\"对象之间的距离衡量\"><a href=\"#对象之间的距离衡量\" class=\"headerlink\" title=\"对象之间的距离衡量\"></a>对象之间的距离衡量</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"聚类算法综述\"><a href=\"#聚类算法综述\" class=\"headerlink\" title=\"聚类算法综述\"></a>聚类算法综述</h1><p>聚类分析（clustering analysis）是将一组对象根据其特征分成不同的 <code>cluster</code>，使得同一 <code>cluster</code> 内的对象在某种意义上比不同的 <code>cluster</code> 之间的对象更为相似。<br>由于 “<code>cluster</code>“ 没有一个明确的定义，因而会有基于不同的模型的聚类算法，其中被广泛运用的聚类算法有以下几类：</p>\n<ul>\n<li>基于<strong>连通模型</strong>（connectivity-based）的聚类算法： 即本文将要讲述的<strong>层次聚类</strong>算法，其核心思想是按照对象之间的距离来聚类，两个离的近的对象要比两个离的远的对象更有可能属于同一 <code>cluster</code>。</li>\n<li>基于<strong>中心点模型</strong>（centroid-based）的聚类算法： 在此类算法中，每个 <code>cluster</code> 都维持一个中心点（centorid），该中心点不一定属于给定的数据集。当预先指定聚类数目 <code>k</code> 时，此类算法需要解决一个优化问题，目标函数为所有的对象距其所属的 <code>cluster</code> 的中心点的距离的平方和，优化变量为每个 <code>cluster</code> 的中心点以及每个对象属于哪个 <code>cluster</code>；此优化问题被证明是 NP-hard 的，但有一些迭代算法可以找到近似解，k-means 算法即是其中的一种。</li>\n<li>基于<strong>分布模型</strong>（distribution-based）的聚类算法： 此类算法认为数据集的中数据是由一种混合概率模型所采样得到的，因而只要将可能属于同一概率分布所产生的数据归为同一 <code>cluster</code> 即可。</li>\n<li>基于<strong>密度</strong>（density-based）的聚类算法： 在此类算法中，密度高的区域被归为一个 <code>cluster</code>，<code>cluster</code> 之间由密度低的区域隔开，密度低的区域中的点被认为是噪声 （noise），常用的密度聚类算法为 DBSCAN 和 OPTICS。</li>\n</ul>\n<hr>\n<h1 id=\"层次聚类综述\"><a href=\"#层次聚类综述\" class=\"headerlink\" title=\"层次聚类综述\"></a>层次聚类综述</h1><p>层次聚类算法 (hierarchical clustering) 将数据集划分为一层一层的 <code>clusters</code>，后面一层生成的 <code>clusters</code> 基于前面一层的结果。层次聚类算法一般分为两类：</p>\n<ul>\n<li>Agglomerative 层次聚类：又称自底向上（bottom-up）的层次聚类，每一个对象最开始都是一个 <code>cluster</code>，每次按一定的准则将最相近的两个 <code>cluster</code> 合并生成一个新的 <code>cluster</code>，如此往复，直至最终所有的对象都属于一个 <code>cluster</code>。本文主要关注此类算法。</li>\n<li>Divisive 层次聚类： 又称自顶向下（top-down）的层次聚类，最开始所有的对象均属于一个 <code>cluster</code>，每次按一定的准则将某个 <code>cluster</code> 划分为多个 <code>cluster</code>，如此往复，直至每个对象均是一个 <code>cluster</code>。</li>\n</ul>\n<p>下图直观的给出了层次聚类的思想以及以上两种聚类策略的异同。</p>\n<div align=\"center\"><br><img src=\"https://i.imgur.com/hiVWi9R.png\" width=\"500\" height=\"400\" alt=\"层次聚类图示\" align=\"center\"><br></div>\n\n<p>另外，需指出的是，层次聚类算法是一种贪心算法（greedy algorithm），因其每一次合并或划分都是基于某种局部最优的选择。</p>\n<h2 id=\"树形图\"><a href=\"#树形图\" class=\"headerlink\" title=\"树形图\"></a>树形图</h2><p>树形图（dendrogram）可以直观地表示层次聚类的成果。一个有 <code>5</code> 个点的树形图如下图所示，其中纵坐标高度表示不同的 <code>cluster</code> 之间的距离（“距离”的衡量准则可以多种多样，详见本文后面的定义），可以从这张图看到，\\( x_1 \\) 和 \\( x_2 \\) 的距离最近（为 <code>1</code>），因此将 \\( x_1 \\) 和 \\( x_2 \\) 合并为一个 cluster \\( (x_1, x_2) \\)，所以在树形图中首先将节点 \\( x_1 \\) 和 \\( x_2 \\) 连接，使其成为一个新的节点  \\( (x_1, x_2) \\) 的子节点，并将这个新的节点的高度置为 <code>1</code>；之后再在剩下的 <code>4</code> 个 <code>cluster</code> \\( (x_1, x_2) \\)， \\( x_3 \\)， \\( x_4 \\) 和 \\( x_5 \\) 中选取距离最近的两个 <code>cluster</code> 合并，\\( x_4 \\) 和 \\( x_5 \\) 的距离最近（为 <code>2</code>），因此将 \\( x_4 \\) 和 \\( x_5 \\) 合并为一个 cluster \\( (x_4, x_5) \\)，体现在树形图上，是将节点 \\( x_4 \\) 和 \\( x_5 \\) 连接，使其成为一个新的节点 \\( (x_4, x_5) \\) 的子节点，并将此新节点的高度置为 <code>2</code>；….依次模式进行树形图的生成，直至最终只剩下一个 <code>cluster</code> \\( ((x_1, x_2), x_3), (x_4, x_5)) \\)。<br>可以直观地看到，如果我们想得到一个聚类结果，使任意的两个 <code>cluster</code> 之间的距离都不大于 \\( h \\)，我们只要在树形图上作一条水平的直线对其进行切割，使其纵坐标等于 \\( h \\)，即可获得对应的聚类结果。例如，在下面的树形图中，设 \\( h=2.5 \\)，即可得到 <code>3</code> 个 <code>cluster</code> \\( (x_1, x_2) \\)， \\( x_3 \\) 和 \\( (x_4, x_5) \\)。</p>\n<div align=\"center\"><br><img src=\"https://i.imgur.com/Ag5A0Io.png\" width=\"500\" height=\"400\" alt=\"树形图示例\" align=\"center\"><br></div>\n\n<h2 id=\"对象之间的距离衡量\"><a href=\"#对象之间的距离衡量\" class=\"headerlink\" title=\"对象之间的距离衡量\"></a>对象之间的距离衡量</h2>"},{"title":"Python 中的 Unicode String 和 Byte String","layout":"post","date":"2017-10-27T13:32:38.000Z","keywords":"python,unicode,string","_content":"\n# python 2.x 和 python 3.x 字符串类型的区别 #\npython 2.x 中字符编码的坑是历史遗留问题，到 python 3.x 已经得到了很好的解决，在这里简要梳理一下二者处理字符串的思路。\n## python 2.x ##\n- `str` 类型：处理 binary 数据和 ASCII 文本数据。\n- `unicode` 类型：处理**非 ASCII** 文本数据。\n\n## python 3.x ##\n- `bytes` 类型：处理 binary 数据，同 `str` 类型一样是一个序列类型，其中每个元素均为一个 byte（本质上是一个取值为 0~255 的整型对象），用于处理二进制文件或数据（如图像，音频等）。\n- `str` 类型：处理 unicode 文本数据（包含 ASCII 文本数据）。\n- `bytearray` 类型：`bytes` 类型的变种，但是此类型是 **mutable** 的。\n\n------------\n\n# Unicode 简介 #\n包括 **ASCII 码**、**latin-1 编码** 和 **utf-8 编码** 等在内的码都被认为是 unicode 码。\n## 编码和解码的概念 ##\n- 编码（encoding）：将字符串映射为一串原始的字节。\n- 解码（decoding）：将一串原始的字节翻译成字符串。\n\n## ASCII码 ##\n- 编码长度为 1 个 byte.\n- 编码范围为 `0x00`~`0x7F`，只包含一些常见的字符。\n\n## latin-1码 ##\n- 编码长度为 1 个 byte.\n- 编码范围为 `0x00`~`0xFF`，能支持更多的字符（如 accent character），兼容 ASCII 码。\n\n## utf-8码 ##\n- 编码长度可变，为 1~4 个 byte。\n- 当编码长度为 1 个 byte 时，等同于 ASCII 码，取值为 `0x00` ~ `0x7F`；当编码长度大于 1 个 byte 时，每个 byte 的取值为 `0x80` ~ `0xFF`。\n\n## 其它编码 ##\n- utf-16，编码长度为定长 2 个 byte。\n- utf-32，编码长度为定长 4 个 byte。\n\n------------\n\n# Unicode 字符串的存储方式 #\n## 在内存中的存储方式 ##\nunicode 字符串在内存中以一种**与编码方式无关**的方式存储：[unicode code point](https://www.wikiwand.com/en/List_of_Unicode_characters)，在表示 unicode 字符串时可以以 unicode code point 的方式表示，例如在下面的例子 中，`a` 和 `b` 表示的是同一字符串（其中 `'\\uNNNN' ` 即为 unicode code point，`N` 为一个十六进制位；当 unicode code point 的取值在 0~255 范围内时，也可以 `'\\xNN'` 的形式表示）：\n```python\n# python 2.7\n>>> a = u'\\u5a1c\\u5854\\u838e'\n>>> b = u'娜塔莎'\n>>> print a, b\n娜塔莎 娜塔莎\n>>> c = u'\\xe4'\nä\n```\n## 在文件等外部媒介中的存储方式 ##\nunicode 字符串在文件等外部媒介中须按照指定的编码方式将字符串转换为原始字节串存储。\n\n# 字符表示 #\n## python 3.x ##\n在 python 3.x 中，`str` 类型即可满足日常的字符需求（不论是 ASCII 字符还是国际字符），如下例所示：\n```python\n# python 3.6\n>>> a = 'Natasha, 娜塔莎'\n>>> type(a)\nstr\n>>> len(a)\n12\n```\n可以看到，python 3.x 中得到的 `a` 的长度为 12（包含空格），没有任何问题；我们可以对 `a` 进行编码，将其转换为 `bytes` 类型：\n```python\n# python 3.6\n>>> b = a.encode('utf-8')\n>>> b\nb'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'\n>>> type(b)\nbytes\n```\n从上面可以看出，`bytes` 类型的对象中的某个字节的取值在 `0x00` ~ `0x7F` 时，控制台的输出会显示出其对应的 ASCII 码字符，但其本质上是一个原始字节，不应与任何字符等同。\n同理，我们也可以将一个 `bytes` 类型的对象译码为一个 `str` 类型的对象：\n```python\n# python 3.6\n>>> a = b.decode('utf-8')\n>>> a\n'Natasha, 娜塔莎'\n```\n\n## python 2.x ##\n在 python 2.x 中，如果还是用 `str` 类型来表示国际字符，就会有问题：\n```python \n# python 2.7\n>>> a = 'Natasha, 娜塔莎'\n>>> type(a)\nstr\n>>> a\n'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'\n>>> len(a)\n18\n>>> print a\nNatasha, 娜塔莎\n```\n可以看到，python 2.x 中虽然定义了一个 ASCII 字符和中文字符混合的 `str` 字符串，但实际上 `a` 在内存中存储为一串字节序列，且长度也是该字节序列的长度，很明显与我们的定义字符串的初衷不符合。值得注意的是，这里 `a` 正好是字符串 `'Natasha, 娜塔莎'` 的 utf-8 编码的结果，且将 `a` 打印出来的结果和我们的定义初衷相符合，这其实与控制台的默认编码方式有关，这里控制台的默认编码方式正好是 utf-8，获取控制台的默认编码方式的方式如下:\n```python\n# python 2.7\n>>> import sys\n>>> sys.stdin.encoding  # 控制台的输入编码，可解释前例中 a 在内存中的表现形式\n'utf-8'\n>>> sys.stdout.encoding # 控制台的输出编码，可解释前例中打印 a 的显示结果\n'utf-8'\n```\n另外，`sys.getdefaultencoding()`函数也会得到一种编码方式，得到的结果是系统的默认编码方式，在 python 2.x 中，该函数总是返回 `'ascii'`, 这表明在对字符串编译码时不指定编码方式时所采用的编码方式为ASCII 编码；除此之外，在 python 2.x 中，ASCII 编码方式还会被用作隐式转换，例如 `json.dumps()` 函数在默认情况下总是返回一串字节串，不论输入的数据结构里面的字符串是 unicode 类型还是 str 类型。在 python 3.x 中，隐式转换已经被禁止（也可以说，python 3.x 用不到隐式转换：>）。\n切回正题，在 python 2.x 表示国际字符的正确方式应该是定义一个 `unicode` 类型字符串，如下所示：\n```python\n# python 2.7\n>>> a = u'Natasha, 娜塔莎'\n>>> type(a)\nunicode\n>>> len(a)\n12\n>>> b = a.encode('utf-8')\n>>> b\n'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'\n>>> type(b)\nstr\n>>> a = b.decode('utf-8')\n>>> a\nu'Natasha, \\u5a1c\\u5854\\u838e'\n```\n另外，我们可以对 `unicode` 类型字符串进行编码操作，对 `str` 类型字符串进行译码操作。\n\n------------\n\n# 文本文件操作 #\n## python 3.x ##\n在 python 3.x 中，文本文件的读写过程中的编解码过程可以通过指定 `open` 函数的参数 `encoding` 的值来自动进行（python 3.x 中的默认情况下文件的编码方式可以由函数 `sys.getfilesystemencoding()`得到，如：\n```python\n# python 3.6\n>>> import sys\n>>> sys.getfilesystemencoding()\n'utf-8'\n>>> a = '娜塔莎'\n>>> f = open('data.txt', 'w', encoding='utf-8')\n>>> f.write(a)\n3\n>>> f.close()\n>>> f = open('data.txt', 'w', encoding='utf-8')\n>>> f.read()\n'娜塔莎'\n>>> f.close()\n```\n当然，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：\n```python\n# python 3.6\n>>> a = '娜塔莎'\n>>> b = a.encode('utf-8')\n>>> f = open('data.txt', 'wb')\n>>> f.write(b)\n9\n>>> f.close()\n>>> f.read().decode('utf-8')\n'娜塔莎'\n>>> f.close()\n```\n## python 2.x ##\n在 python 2.x 中，`open` 函数只支持读写二进制文件或者文件中的字符大小为 1 个 Byte 的文件，写入的数据为字节，读取出来的数据类型为 `str`；`codecs.open` 函数则支持自动读写 unicode 文本文件，如：\n```python\n# python 2.7\n>>> import codecs\n>>> a = u'安德烈'\n>>> f = codecs.open('data.txt', 'w', encoding='utf-8')\n>>> f.write(a)\n>>> f.close()\n>>> f = codecs.open('data.txt', 'r', encoding='utf-8') \n>>> print f.read()\n安德烈\n>>> f.close()\n```\n类似地，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：\n```python\n# python 2.7\n>>> b = a.encode('utf-8')\n>>> f = open('data.txt', 'w')\n>>> f.write(b)\n>>> f.close()\n>>> f = open('data.txt', 'r')\n>>> print f.read().decode('utf-8')\n安德烈\n>>> f.close()\n```\n总之，在 python 2.x 中读写文件注意两点，一是从文件读取到数据之后的第一件事就是将其按照合适的编码方式译码，二是当所有操作完成需要写入文件时，一定要将要写入的字符串按照合适的编码方式编码。\n\n------------\n\n# python 2.x 中的 json.dumps() 操作 #\njson 作为一种广为各大平台所采用的数据交换格式，在 python 中更是被广泛使用，然而，在 python 2.x 中，有些地方需要注意。\n对于数据结构中的字符串类型为 `str`、 但实际上定义的是一个国际字符串的情况，`json.dumps()` 的结果如下：\n```python\n# python 2.7\n>>> a = {'Natasha': '娜塔莎'}\n>>> a_json_1 = json.dumps(a)\n>>> a_json_1\n'{\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"}'\n>>> a_json_2 = json.dumps(a, ensure_ascii=False)\n>>> a_json_2\n'{\"Natasha\": \"\\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e\"}'\n```\n可以看到，在这种情形下，当 `ensure_ascii` 为 `True` 时，`json.dumps()` 操作返回值的类型为 `str`，其会将 `a` 中的中文字符映射为其对应的 unicode code point 的形式，但是却是以 ASCII 字符存储的（即 `'\\\\u5a1c'` 对应 `6` 个字符而非 `1` 个）；当 `ensure_ascii` 为 `False` 时，`json.dumps()` 操作的返回值类型仍然为 `str`，其会将中文字符映射为其对应的某种 unicode 编码（这里为 utf-8）后的字节串，所以我们将 `a_json_2` 译码就可以得到我们想要的 json：\n```python\n# python 2.7\n>>> a_json_2.decode('utf-8')\nu'{\"Natasha\": \"\\u5a1c\\u5854\\u838e\"}'\n>>> print a_json_2.decode('utf-8')\n{\"Natasha\": \"娜塔莎\"}\n```\n对于数据结构中的字符串类型为 `unicode` 的情况，`json.dumps()` 的结果如下：\n```python\n# python 2.7\n>>> u = {u'Natasha': u'娜塔莎'}\n>>> u_json_1 = json.dumps(u)\n>>> u_json_1\n'{\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"}'\n>>> u_json_2 = json.dumps(u, ensure_ascii=False)\n>>> u_json_2\nu'{\"Natasha\": \"\\u5a1c\\u5854\\u838e\"}'\n>>> print u_json_2\n{\"Natasha\": \"娜塔莎\"}\n```\n在这种情形下，当 `ensure_ascii` 为 `True` 时，`json.dumps()` 操作返回值的类型为 `str`，其得到的结果和前面对 a 操作返回的结果完全一样；而当`ensure_ascii` 为 `False` 时，`json.dumps()` 操作的返回值类型变为 `unicode`，原始数据结构中的中文字符在返回值中完整地保留了下来。\n对于数据结构中的字符串类型既有 `unicode` 又有 `str` 的情形，运用 `json.dumps()` 时将 `ensure_ascii` 设为 `False` 的情况又会完全不同。\n当数据结构中的 ASCII 字符串为 `str` 类型，国际字符串为 `unicode` 类型时（如 `u = {'Natasha': u'娜塔莎'}`），`json.dumps()` 的返回值是正常的、符合预期的 `unicode` 字符串；\n当数据结构中有国际字符串为 `str` 类型，又存在其他字符串为 `unicode` 类型时（如 `u = {u'Natasha': '娜塔莎'}` 或 `u = {u'娜塔莉娅': '娜塔莎'}`），`json.dumps()` 会抛出异常 `UnicodeDecodeError`，这是因为系统会将数据结构中 `str` 类型字符串都转换为 `unicode` 类型，而系统的默认编译码方式为 ascii 编码，因而对 `str` 类型的国际字符串进行 ascii 译码就必然会出错。","source":"_posts/Python-中的-Unicode-string-和-Byte-string.md","raw":"---\ntitle: Python 中的 Unicode String 和 Byte String\nlayout: post\ndate: 2017-10-27 21:32:38\ntags: \n- python\n- unicode\ncategories: \n- python学习笔记\nkeywords: python,unicode,string\n---\n\n# python 2.x 和 python 3.x 字符串类型的区别 #\npython 2.x 中字符编码的坑是历史遗留问题，到 python 3.x 已经得到了很好的解决，在这里简要梳理一下二者处理字符串的思路。\n## python 2.x ##\n- `str` 类型：处理 binary 数据和 ASCII 文本数据。\n- `unicode` 类型：处理**非 ASCII** 文本数据。\n\n## python 3.x ##\n- `bytes` 类型：处理 binary 数据，同 `str` 类型一样是一个序列类型，其中每个元素均为一个 byte（本质上是一个取值为 0~255 的整型对象），用于处理二进制文件或数据（如图像，音频等）。\n- `str` 类型：处理 unicode 文本数据（包含 ASCII 文本数据）。\n- `bytearray` 类型：`bytes` 类型的变种，但是此类型是 **mutable** 的。\n\n------------\n\n# Unicode 简介 #\n包括 **ASCII 码**、**latin-1 编码** 和 **utf-8 编码** 等在内的码都被认为是 unicode 码。\n## 编码和解码的概念 ##\n- 编码（encoding）：将字符串映射为一串原始的字节。\n- 解码（decoding）：将一串原始的字节翻译成字符串。\n\n## ASCII码 ##\n- 编码长度为 1 个 byte.\n- 编码范围为 `0x00`~`0x7F`，只包含一些常见的字符。\n\n## latin-1码 ##\n- 编码长度为 1 个 byte.\n- 编码范围为 `0x00`~`0xFF`，能支持更多的字符（如 accent character），兼容 ASCII 码。\n\n## utf-8码 ##\n- 编码长度可变，为 1~4 个 byte。\n- 当编码长度为 1 个 byte 时，等同于 ASCII 码，取值为 `0x00` ~ `0x7F`；当编码长度大于 1 个 byte 时，每个 byte 的取值为 `0x80` ~ `0xFF`。\n\n## 其它编码 ##\n- utf-16，编码长度为定长 2 个 byte。\n- utf-32，编码长度为定长 4 个 byte。\n\n------------\n\n# Unicode 字符串的存储方式 #\n## 在内存中的存储方式 ##\nunicode 字符串在内存中以一种**与编码方式无关**的方式存储：[unicode code point](https://www.wikiwand.com/en/List_of_Unicode_characters)，在表示 unicode 字符串时可以以 unicode code point 的方式表示，例如在下面的例子 中，`a` 和 `b` 表示的是同一字符串（其中 `'\\uNNNN' ` 即为 unicode code point，`N` 为一个十六进制位；当 unicode code point 的取值在 0~255 范围内时，也可以 `'\\xNN'` 的形式表示）：\n```python\n# python 2.7\n>>> a = u'\\u5a1c\\u5854\\u838e'\n>>> b = u'娜塔莎'\n>>> print a, b\n娜塔莎 娜塔莎\n>>> c = u'\\xe4'\nä\n```\n## 在文件等外部媒介中的存储方式 ##\nunicode 字符串在文件等外部媒介中须按照指定的编码方式将字符串转换为原始字节串存储。\n\n# 字符表示 #\n## python 3.x ##\n在 python 3.x 中，`str` 类型即可满足日常的字符需求（不论是 ASCII 字符还是国际字符），如下例所示：\n```python\n# python 3.6\n>>> a = 'Natasha, 娜塔莎'\n>>> type(a)\nstr\n>>> len(a)\n12\n```\n可以看到，python 3.x 中得到的 `a` 的长度为 12（包含空格），没有任何问题；我们可以对 `a` 进行编码，将其转换为 `bytes` 类型：\n```python\n# python 3.6\n>>> b = a.encode('utf-8')\n>>> b\nb'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'\n>>> type(b)\nbytes\n```\n从上面可以看出，`bytes` 类型的对象中的某个字节的取值在 `0x00` ~ `0x7F` 时，控制台的输出会显示出其对应的 ASCII 码字符，但其本质上是一个原始字节，不应与任何字符等同。\n同理，我们也可以将一个 `bytes` 类型的对象译码为一个 `str` 类型的对象：\n```python\n# python 3.6\n>>> a = b.decode('utf-8')\n>>> a\n'Natasha, 娜塔莎'\n```\n\n## python 2.x ##\n在 python 2.x 中，如果还是用 `str` 类型来表示国际字符，就会有问题：\n```python \n# python 2.7\n>>> a = 'Natasha, 娜塔莎'\n>>> type(a)\nstr\n>>> a\n'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'\n>>> len(a)\n18\n>>> print a\nNatasha, 娜塔莎\n```\n可以看到，python 2.x 中虽然定义了一个 ASCII 字符和中文字符混合的 `str` 字符串，但实际上 `a` 在内存中存储为一串字节序列，且长度也是该字节序列的长度，很明显与我们的定义字符串的初衷不符合。值得注意的是，这里 `a` 正好是字符串 `'Natasha, 娜塔莎'` 的 utf-8 编码的结果，且将 `a` 打印出来的结果和我们的定义初衷相符合，这其实与控制台的默认编码方式有关，这里控制台的默认编码方式正好是 utf-8，获取控制台的默认编码方式的方式如下:\n```python\n# python 2.7\n>>> import sys\n>>> sys.stdin.encoding  # 控制台的输入编码，可解释前例中 a 在内存中的表现形式\n'utf-8'\n>>> sys.stdout.encoding # 控制台的输出编码，可解释前例中打印 a 的显示结果\n'utf-8'\n```\n另外，`sys.getdefaultencoding()`函数也会得到一种编码方式，得到的结果是系统的默认编码方式，在 python 2.x 中，该函数总是返回 `'ascii'`, 这表明在对字符串编译码时不指定编码方式时所采用的编码方式为ASCII 编码；除此之外，在 python 2.x 中，ASCII 编码方式还会被用作隐式转换，例如 `json.dumps()` 函数在默认情况下总是返回一串字节串，不论输入的数据结构里面的字符串是 unicode 类型还是 str 类型。在 python 3.x 中，隐式转换已经被禁止（也可以说，python 3.x 用不到隐式转换：>）。\n切回正题，在 python 2.x 表示国际字符的正确方式应该是定义一个 `unicode` 类型字符串，如下所示：\n```python\n# python 2.7\n>>> a = u'Natasha, 娜塔莎'\n>>> type(a)\nunicode\n>>> len(a)\n12\n>>> b = a.encode('utf-8')\n>>> b\n'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'\n>>> type(b)\nstr\n>>> a = b.decode('utf-8')\n>>> a\nu'Natasha, \\u5a1c\\u5854\\u838e'\n```\n另外，我们可以对 `unicode` 类型字符串进行编码操作，对 `str` 类型字符串进行译码操作。\n\n------------\n\n# 文本文件操作 #\n## python 3.x ##\n在 python 3.x 中，文本文件的读写过程中的编解码过程可以通过指定 `open` 函数的参数 `encoding` 的值来自动进行（python 3.x 中的默认情况下文件的编码方式可以由函数 `sys.getfilesystemencoding()`得到，如：\n```python\n# python 3.6\n>>> import sys\n>>> sys.getfilesystemencoding()\n'utf-8'\n>>> a = '娜塔莎'\n>>> f = open('data.txt', 'w', encoding='utf-8')\n>>> f.write(a)\n3\n>>> f.close()\n>>> f = open('data.txt', 'w', encoding='utf-8')\n>>> f.read()\n'娜塔莎'\n>>> f.close()\n```\n当然，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：\n```python\n# python 3.6\n>>> a = '娜塔莎'\n>>> b = a.encode('utf-8')\n>>> f = open('data.txt', 'wb')\n>>> f.write(b)\n9\n>>> f.close()\n>>> f.read().decode('utf-8')\n'娜塔莎'\n>>> f.close()\n```\n## python 2.x ##\n在 python 2.x 中，`open` 函数只支持读写二进制文件或者文件中的字符大小为 1 个 Byte 的文件，写入的数据为字节，读取出来的数据类型为 `str`；`codecs.open` 函数则支持自动读写 unicode 文本文件，如：\n```python\n# python 2.7\n>>> import codecs\n>>> a = u'安德烈'\n>>> f = codecs.open('data.txt', 'w', encoding='utf-8')\n>>> f.write(a)\n>>> f.close()\n>>> f = codecs.open('data.txt', 'r', encoding='utf-8') \n>>> print f.read()\n安德烈\n>>> f.close()\n```\n类似地，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：\n```python\n# python 2.7\n>>> b = a.encode('utf-8')\n>>> f = open('data.txt', 'w')\n>>> f.write(b)\n>>> f.close()\n>>> f = open('data.txt', 'r')\n>>> print f.read().decode('utf-8')\n安德烈\n>>> f.close()\n```\n总之，在 python 2.x 中读写文件注意两点，一是从文件读取到数据之后的第一件事就是将其按照合适的编码方式译码，二是当所有操作完成需要写入文件时，一定要将要写入的字符串按照合适的编码方式编码。\n\n------------\n\n# python 2.x 中的 json.dumps() 操作 #\njson 作为一种广为各大平台所采用的数据交换格式，在 python 中更是被广泛使用，然而，在 python 2.x 中，有些地方需要注意。\n对于数据结构中的字符串类型为 `str`、 但实际上定义的是一个国际字符串的情况，`json.dumps()` 的结果如下：\n```python\n# python 2.7\n>>> a = {'Natasha': '娜塔莎'}\n>>> a_json_1 = json.dumps(a)\n>>> a_json_1\n'{\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"}'\n>>> a_json_2 = json.dumps(a, ensure_ascii=False)\n>>> a_json_2\n'{\"Natasha\": \"\\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e\"}'\n```\n可以看到，在这种情形下，当 `ensure_ascii` 为 `True` 时，`json.dumps()` 操作返回值的类型为 `str`，其会将 `a` 中的中文字符映射为其对应的 unicode code point 的形式，但是却是以 ASCII 字符存储的（即 `'\\\\u5a1c'` 对应 `6` 个字符而非 `1` 个）；当 `ensure_ascii` 为 `False` 时，`json.dumps()` 操作的返回值类型仍然为 `str`，其会将中文字符映射为其对应的某种 unicode 编码（这里为 utf-8）后的字节串，所以我们将 `a_json_2` 译码就可以得到我们想要的 json：\n```python\n# python 2.7\n>>> a_json_2.decode('utf-8')\nu'{\"Natasha\": \"\\u5a1c\\u5854\\u838e\"}'\n>>> print a_json_2.decode('utf-8')\n{\"Natasha\": \"娜塔莎\"}\n```\n对于数据结构中的字符串类型为 `unicode` 的情况，`json.dumps()` 的结果如下：\n```python\n# python 2.7\n>>> u = {u'Natasha': u'娜塔莎'}\n>>> u_json_1 = json.dumps(u)\n>>> u_json_1\n'{\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"}'\n>>> u_json_2 = json.dumps(u, ensure_ascii=False)\n>>> u_json_2\nu'{\"Natasha\": \"\\u5a1c\\u5854\\u838e\"}'\n>>> print u_json_2\n{\"Natasha\": \"娜塔莎\"}\n```\n在这种情形下，当 `ensure_ascii` 为 `True` 时，`json.dumps()` 操作返回值的类型为 `str`，其得到的结果和前面对 a 操作返回的结果完全一样；而当`ensure_ascii` 为 `False` 时，`json.dumps()` 操作的返回值类型变为 `unicode`，原始数据结构中的中文字符在返回值中完整地保留了下来。\n对于数据结构中的字符串类型既有 `unicode` 又有 `str` 的情形，运用 `json.dumps()` 时将 `ensure_ascii` 设为 `False` 的情况又会完全不同。\n当数据结构中的 ASCII 字符串为 `str` 类型，国际字符串为 `unicode` 类型时（如 `u = {'Natasha': u'娜塔莎'}`），`json.dumps()` 的返回值是正常的、符合预期的 `unicode` 字符串；\n当数据结构中有国际字符串为 `str` 类型，又存在其他字符串为 `unicode` 类型时（如 `u = {u'Natasha': '娜塔莎'}` 或 `u = {u'娜塔莉娅': '娜塔莎'}`），`json.dumps()` 会抛出异常 `UnicodeDecodeError`，这是因为系统会将数据结构中 `str` 类型字符串都转换为 `unicode` 类型，而系统的默认编译码方式为 ascii 编码，因而对 `str` 类型的国际字符串进行 ascii 译码就必然会出错。","slug":"Python-中的-Unicode-string-和-Byte-string","published":1,"updated":"2017-10-29T11:00:25.328Z","comments":1,"photos":[],"link":"","_id":"cjbbkscjl000430nl80kq3n0b","content":"<h1 id=\"python-2-x-和-python-3-x-字符串类型的区别\"><a href=\"#python-2-x-和-python-3-x-字符串类型的区别\" class=\"headerlink\" title=\"python 2.x 和 python 3.x 字符串类型的区别\"></a>python 2.x 和 python 3.x 字符串类型的区别</h1><p>python 2.x 中字符编码的坑是历史遗留问题，到 python 3.x 已经得到了很好的解决，在这里简要梳理一下二者处理字符串的思路。</p>\n<h2 id=\"python-2-x\"><a href=\"#python-2-x\" class=\"headerlink\" title=\"python 2.x\"></a>python 2.x</h2><ul>\n<li><code>str</code> 类型：处理 binary 数据和 ASCII 文本数据。</li>\n<li><code>unicode</code> 类型：处理<strong>非 ASCII</strong> 文本数据。</li>\n</ul>\n<h2 id=\"python-3-x\"><a href=\"#python-3-x\" class=\"headerlink\" title=\"python 3.x\"></a>python 3.x</h2><ul>\n<li><code>bytes</code> 类型：处理 binary 数据，同 <code>str</code> 类型一样是一个序列类型，其中每个元素均为一个 byte（本质上是一个取值为 0~255 的整型对象），用于处理二进制文件或数据（如图像，音频等）。</li>\n<li><code>str</code> 类型：处理 unicode 文本数据（包含 ASCII 文本数据）。</li>\n<li><code>bytearray</code> 类型：<code>bytes</code> 类型的变种，但是此类型是 <strong>mutable</strong> 的。</li>\n</ul>\n<hr>\n<h1 id=\"Unicode-简介\"><a href=\"#Unicode-简介\" class=\"headerlink\" title=\"Unicode 简介\"></a>Unicode 简介</h1><p>包括 <strong>ASCII 码</strong>、<strong>latin-1 编码</strong> 和 <strong>utf-8 编码</strong> 等在内的码都被认为是 unicode 码。</p>\n<h2 id=\"编码和解码的概念\"><a href=\"#编码和解码的概念\" class=\"headerlink\" title=\"编码和解码的概念\"></a>编码和解码的概念</h2><ul>\n<li>编码（encoding）：将字符串映射为一串原始的字节。</li>\n<li>解码（decoding）：将一串原始的字节翻译成字符串。</li>\n</ul>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><ul>\n<li>编码长度为 1 个 byte.</li>\n<li>编码范围为 <code>0x00</code>~<code>0x7F</code>，只包含一些常见的字符。</li>\n</ul>\n<h2 id=\"latin-1码\"><a href=\"#latin-1码\" class=\"headerlink\" title=\"latin-1码\"></a>latin-1码</h2><ul>\n<li>编码长度为 1 个 byte.</li>\n<li>编码范围为 <code>0x00</code>~<code>0xFF</code>，能支持更多的字符（如 accent character），兼容 ASCII 码。</li>\n</ul>\n<h2 id=\"utf-8码\"><a href=\"#utf-8码\" class=\"headerlink\" title=\"utf-8码\"></a>utf-8码</h2><ul>\n<li>编码长度可变，为 1~4 个 byte。</li>\n<li>当编码长度为 1 个 byte 时，等同于 ASCII 码，取值为 <code>0x00</code> ~ <code>0x7F</code>；当编码长度大于 1 个 byte 时，每个 byte 的取值为 <code>0x80</code> ~ <code>0xFF</code>。</li>\n</ul>\n<h2 id=\"其它编码\"><a href=\"#其它编码\" class=\"headerlink\" title=\"其它编码\"></a>其它编码</h2><ul>\n<li>utf-16，编码长度为定长 2 个 byte。</li>\n<li>utf-32，编码长度为定长 4 个 byte。</li>\n</ul>\n<hr>\n<h1 id=\"Unicode-字符串的存储方式\"><a href=\"#Unicode-字符串的存储方式\" class=\"headerlink\" title=\"Unicode 字符串的存储方式\"></a>Unicode 字符串的存储方式</h1><h2 id=\"在内存中的存储方式\"><a href=\"#在内存中的存储方式\" class=\"headerlink\" title=\"在内存中的存储方式\"></a>在内存中的存储方式</h2><p>unicode 字符串在内存中以一种<strong>与编码方式无关</strong>的方式存储：<a href=\"https://www.wikiwand.com/en/List_of_Unicode_characters\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">unicode code point</a>，在表示 unicode 字符串时可以以 unicode code point 的方式表示，例如在下面的例子 中，<code>a</code> 和 <code>b</code> 表示的是同一字符串（其中 <code>&#39;\\uNNNN&#39;</code> 即为 unicode code point，<code>N</code> 为一个十六进制位；当 unicode code point 的取值在 0~255 范围内时，也可以 <code>&#39;\\xNN&#39;</code> 的形式表示）：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">u'\\u5a1c\\u5854\\u838e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">u'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a, b</div><div class=\"line\">娜塔莎 娜塔莎</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"string\">u'\\xe4'</span></div><div class=\"line\">ä</div></pre></td></tr></table></figure></p>\n<h2 id=\"在文件等外部媒介中的存储方式\"><a href=\"#在文件等外部媒介中的存储方式\" class=\"headerlink\" title=\"在文件等外部媒介中的存储方式\"></a>在文件等外部媒介中的存储方式</h2><p>unicode 字符串在文件等外部媒介中须按照指定的编码方式将字符串转换为原始字节串存储。</p>\n<h1 id=\"字符表示\"><a href=\"#字符表示\" class=\"headerlink\" title=\"字符表示\"></a>字符表示</h1><h2 id=\"python-3-x-1\"><a href=\"#python-3-x-1\" class=\"headerlink\" title=\"python 3.x\"></a>python 3.x</h2><p>在 python 3.x 中，<code>str</code> 类型即可满足日常的字符需求（不论是 ASCII 字符还是国际字符），如下例所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'Natasha, 娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">str</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(a)</div><div class=\"line\"><span class=\"number\">12</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，python 3.x 中得到的 <code>a</code> 的长度为 12（包含空格），没有任何问题；我们可以对 <code>a</code> 进行编码，将其转换为 <code>bytes</code> 类型：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"string\">b'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(b)</div><div class=\"line\">bytes</div></pre></td></tr></table></figure></p>\n<p>从上面可以看出，<code>bytes</code> 类型的对象中的某个字节的取值在 <code>0x00</code> ~ <code>0x7F</code> 时，控制台的输出会显示出其对应的 ASCII 码字符，但其本质上是一个原始字节，不应与任何字符等同。<br>同理，我们也可以将一个 <code>bytes</code> 类型的对象译码为一个 <code>str</code> 类型的对象：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = b.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">'Natasha, 娜塔莎'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"python-2-x-1\"><a href=\"#python-2-x-1\" class=\"headerlink\" title=\"python 2.x\"></a>python 2.x</h2><p>在 python 2.x 中，如果还是用 <code>str</code> 类型来表示国际字符，就会有问题：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'Natasha, 娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">str</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(a)</div><div class=\"line\"><span class=\"number\">18</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a</div><div class=\"line\">Natasha, 娜塔莎</div></pre></td></tr></table></figure></p>\n<p>可以看到，python 2.x 中虽然定义了一个 ASCII 字符和中文字符混合的 <code>str</code> 字符串，但实际上 <code>a</code> 在内存中存储为一串字节序列，且长度也是该字节序列的长度，很明显与我们的定义字符串的初衷不符合。值得注意的是，这里 <code>a</code> 正好是字符串 <code>&#39;Natasha, 娜塔莎&#39;</code> 的 utf-8 编码的结果，且将 <code>a</code> 打印出来的结果和我们的定义初衷相符合，这其实与控制台的默认编码方式有关，这里控制台的默认编码方式正好是 utf-8，获取控制台的默认编码方式的方式如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.stdin.encoding  <span class=\"comment\"># 控制台的输入编码，可解释前例中 a 在内存中的表现形式</span></div><div class=\"line\"><span class=\"string\">'utf-8'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.stdout.encoding <span class=\"comment\"># 控制台的输出编码，可解释前例中打印 a 的显示结果</span></div><div class=\"line\"><span class=\"string\">'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>另外，<code>sys.getdefaultencoding()</code>函数也会得到一种编码方式，得到的结果是系统的默认编码方式，在 python 2.x 中，该函数总是返回 <code>&#39;ascii&#39;</code>, 这表明在对字符串编译码时不指定编码方式时所采用的编码方式为ASCII 编码；除此之外，在 python 2.x 中，ASCII 编码方式还会被用作隐式转换，例如 <code>json.dumps()</code> 函数在默认情况下总是返回一串字节串，不论输入的数据结构里面的字符串是 unicode 类型还是 str 类型。在 python 3.x 中，隐式转换已经被禁止（也可以说，python 3.x 用不到隐式转换：&gt;）。<br>切回正题，在 python 2.x 表示国际字符的正确方式应该是定义一个 <code>unicode</code> 类型字符串，如下所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">u'Natasha, 娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">unicode</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(a)</div><div class=\"line\"><span class=\"number\">12</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"string\">'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(b)</div><div class=\"line\">str</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = b.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">u'Natasha, \\u5a1c\\u5854\\u838e'</span></div></pre></td></tr></table></figure></p>\n<p>另外，我们可以对 <code>unicode</code> 类型字符串进行编码操作，对 <code>str</code> 类型字符串进行译码操作。</p>\n<hr>\n<h1 id=\"文本文件操作\"><a href=\"#文本文件操作\" class=\"headerlink\" title=\"文本文件操作\"></a>文本文件操作</h1><h2 id=\"python-3-x-2\"><a href=\"#python-3-x-2\" class=\"headerlink\" title=\"python 3.x\"></a>python 3.x</h2><p>在 python 3.x 中，文本文件的读写过程中的编解码过程可以通过指定 <code>open</code> 函数的参数 <code>encoding</code> 的值来自动进行（python 3.x 中的默认情况下文件的编码方式可以由函数 <code>sys.getfilesystemencoding()</code>得到，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getfilesystemencoding()</div><div class=\"line\"><span class=\"string\">'utf-8'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(a)</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>当然，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'wb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(b)</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<h2 id=\"python-2-x-2\"><a href=\"#python-2-x-2\" class=\"headerlink\" title=\"python 2.x\"></a>python 2.x</h2><p>在 python 2.x 中，<code>open</code> 函数只支持读写二进制文件或者文件中的字符大小为 1 个 Byte 的文件，写入的数据为字节，读取出来的数据类型为 <code>str</code>；<code>codecs.open</code> 函数则支持自动读写 unicode 文本文件，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> codecs</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">u'安德烈'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = codecs.open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(a)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = codecs.open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> f.read()</div><div class=\"line\">安德烈</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>类似地，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(b)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> f.read().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">安德烈</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>总之，在 python 2.x 中读写文件注意两点，一是从文件读取到数据之后的第一件事就是将其按照合适的编码方式译码，二是当所有操作完成需要写入文件时，一定要将要写入的字符串按照合适的编码方式编码。</p>\n<hr>\n<h1 id=\"python-2-x-中的-json-dumps-操作\"><a href=\"#python-2-x-中的-json-dumps-操作\" class=\"headerlink\" title=\"python 2.x 中的 json.dumps() 操作\"></a>python 2.x 中的 json.dumps() 操作</h1><p>json 作为一种广为各大平台所采用的数据交换格式，在 python 中更是被广泛使用，然而，在 python 2.x 中，有些地方需要注意。<br>对于数据结构中的字符串类型为 <code>str</code>、 但实际上定义的是一个国际字符串的情况，<code>json.dumps()</code> 的结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'Natasha'</span>: <span class=\"string\">'娜塔莎'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_1 = json.dumps(a)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_1</div><div class=\"line\"><span class=\"string\">'&#123;\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_2 = json.dumps(a, ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_2</div><div class=\"line\"><span class=\"string\">'&#123;\"Natasha\": \"\\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e\"&#125;'</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，在这种情形下，当 <code>ensure_ascii</code> 为 <code>True</code> 时，<code>json.dumps()</code> 操作返回值的类型为 <code>str</code>，其会将 <code>a</code> 中的中文字符映射为其对应的 unicode code point 的形式，但是却是以 ASCII 字符存储的（即 <code>&#39;\\\\u5a1c&#39;</code> 对应 <code>6</code> 个字符而非 <code>1</code> 个）；当 <code>ensure_ascii</code> 为 <code>False</code> 时，<code>json.dumps()</code> 操作的返回值类型仍然为 <code>str</code>，其会将中文字符映射为其对应的某种 unicode 编码（这里为 utf-8）后的字节串，所以我们将 <code>a_json_2</code> 译码就可以得到我们想要的 json：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_2.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"string\">u'&#123;\"Natasha\": \"\\u5a1c\\u5854\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a_json_2.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&#123;<span class=\"string\">\"Natasha\"</span>: <span class=\"string\">\"娜塔莎\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>对于数据结构中的字符串类型为 <code>unicode</code> 的情况，<code>json.dumps()</code> 的结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u = &#123;<span class=\"string\">u'Natasha'</span>: <span class=\"string\">u'娜塔莎'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_1 = json.dumps(u)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_1</div><div class=\"line\"><span class=\"string\">'&#123;\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_2 = json.dumps(u, ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_2</div><div class=\"line\"><span class=\"string\">u'&#123;\"Natasha\": \"\\u5a1c\\u5854\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> u_json_2</div><div class=\"line\">&#123;<span class=\"string\">\"Natasha\"</span>: <span class=\"string\">\"娜塔莎\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>在这种情形下，当 <code>ensure_ascii</code> 为 <code>True</code> 时，<code>json.dumps()</code> 操作返回值的类型为 <code>str</code>，其得到的结果和前面对 a 操作返回的结果完全一样；而当<code>ensure_ascii</code> 为 <code>False</code> 时，<code>json.dumps()</code> 操作的返回值类型变为 <code>unicode</code>，原始数据结构中的中文字符在返回值中完整地保留了下来。<br>对于数据结构中的字符串类型既有 <code>unicode</code> 又有 <code>str</code> 的情形，运用 <code>json.dumps()</code> 时将 <code>ensure_ascii</code> 设为 <code>False</code> 的情况又会完全不同。<br>当数据结构中的 ASCII 字符串为 <code>str</code> 类型，国际字符串为 <code>unicode</code> 类型时（如 <code>u = {&#39;Natasha&#39;: u&#39;娜塔莎&#39;}</code>），<code>json.dumps()</code> 的返回值是正常的、符合预期的 <code>unicode</code> 字符串；<br>当数据结构中有国际字符串为 <code>str</code> 类型，又存在其他字符串为 <code>unicode</code> 类型时（如 <code>u = {u&#39;Natasha&#39;: &#39;娜塔莎&#39;}</code> 或 <code>u = {u&#39;娜塔莉娅&#39;: &#39;娜塔莎&#39;}</code>），<code>json.dumps()</code> 会抛出异常 <code>UnicodeDecodeError</code>，这是因为系统会将数据结构中 <code>str</code> 类型字符串都转换为 <code>unicode</code> 类型，而系统的默认编译码方式为 ascii 编码，因而对 <code>str</code> 类型的国际字符串进行 ascii 译码就必然会出错。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-2-x-和-python-3-x-字符串类型的区别\"><a href=\"#python-2-x-和-python-3-x-字符串类型的区别\" class=\"headerlink\" title=\"python 2.x 和 python 3.x 字符串类型的区别\"></a>python 2.x 和 python 3.x 字符串类型的区别</h1><p>python 2.x 中字符编码的坑是历史遗留问题，到 python 3.x 已经得到了很好的解决，在这里简要梳理一下二者处理字符串的思路。</p>\n<h2 id=\"python-2-x\"><a href=\"#python-2-x\" class=\"headerlink\" title=\"python 2.x\"></a>python 2.x</h2><ul>\n<li><code>str</code> 类型：处理 binary 数据和 ASCII 文本数据。</li>\n<li><code>unicode</code> 类型：处理<strong>非 ASCII</strong> 文本数据。</li>\n</ul>\n<h2 id=\"python-3-x\"><a href=\"#python-3-x\" class=\"headerlink\" title=\"python 3.x\"></a>python 3.x</h2><ul>\n<li><code>bytes</code> 类型：处理 binary 数据，同 <code>str</code> 类型一样是一个序列类型，其中每个元素均为一个 byte（本质上是一个取值为 0~255 的整型对象），用于处理二进制文件或数据（如图像，音频等）。</li>\n<li><code>str</code> 类型：处理 unicode 文本数据（包含 ASCII 文本数据）。</li>\n<li><code>bytearray</code> 类型：<code>bytes</code> 类型的变种，但是此类型是 <strong>mutable</strong> 的。</li>\n</ul>\n<hr>\n<h1 id=\"Unicode-简介\"><a href=\"#Unicode-简介\" class=\"headerlink\" title=\"Unicode 简介\"></a>Unicode 简介</h1><p>包括 <strong>ASCII 码</strong>、<strong>latin-1 编码</strong> 和 <strong>utf-8 编码</strong> 等在内的码都被认为是 unicode 码。</p>\n<h2 id=\"编码和解码的概念\"><a href=\"#编码和解码的概念\" class=\"headerlink\" title=\"编码和解码的概念\"></a>编码和解码的概念</h2><ul>\n<li>编码（encoding）：将字符串映射为一串原始的字节。</li>\n<li>解码（decoding）：将一串原始的字节翻译成字符串。</li>\n</ul>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><ul>\n<li>编码长度为 1 个 byte.</li>\n<li>编码范围为 <code>0x00</code>~<code>0x7F</code>，只包含一些常见的字符。</li>\n</ul>\n<h2 id=\"latin-1码\"><a href=\"#latin-1码\" class=\"headerlink\" title=\"latin-1码\"></a>latin-1码</h2><ul>\n<li>编码长度为 1 个 byte.</li>\n<li>编码范围为 <code>0x00</code>~<code>0xFF</code>，能支持更多的字符（如 accent character），兼容 ASCII 码。</li>\n</ul>\n<h2 id=\"utf-8码\"><a href=\"#utf-8码\" class=\"headerlink\" title=\"utf-8码\"></a>utf-8码</h2><ul>\n<li>编码长度可变，为 1~4 个 byte。</li>\n<li>当编码长度为 1 个 byte 时，等同于 ASCII 码，取值为 <code>0x00</code> ~ <code>0x7F</code>；当编码长度大于 1 个 byte 时，每个 byte 的取值为 <code>0x80</code> ~ <code>0xFF</code>。</li>\n</ul>\n<h2 id=\"其它编码\"><a href=\"#其它编码\" class=\"headerlink\" title=\"其它编码\"></a>其它编码</h2><ul>\n<li>utf-16，编码长度为定长 2 个 byte。</li>\n<li>utf-32，编码长度为定长 4 个 byte。</li>\n</ul>\n<hr>\n<h1 id=\"Unicode-字符串的存储方式\"><a href=\"#Unicode-字符串的存储方式\" class=\"headerlink\" title=\"Unicode 字符串的存储方式\"></a>Unicode 字符串的存储方式</h1><h2 id=\"在内存中的存储方式\"><a href=\"#在内存中的存储方式\" class=\"headerlink\" title=\"在内存中的存储方式\"></a>在内存中的存储方式</h2><p>unicode 字符串在内存中以一种<strong>与编码方式无关</strong>的方式存储：<a href=\"https://www.wikiwand.com/en/List_of_Unicode_characters\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">unicode code point</a>，在表示 unicode 字符串时可以以 unicode code point 的方式表示，例如在下面的例子 中，<code>a</code> 和 <code>b</code> 表示的是同一字符串（其中 <code>&#39;\\uNNNN&#39;</code> 即为 unicode code point，<code>N</code> 为一个十六进制位；当 unicode code point 的取值在 0~255 范围内时，也可以 <code>&#39;\\xNN&#39;</code> 的形式表示）：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">u'\\u5a1c\\u5854\\u838e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">u'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a, b</div><div class=\"line\">娜塔莎 娜塔莎</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"string\">u'\\xe4'</span></div><div class=\"line\">ä</div></pre></td></tr></table></figure></p>\n<h2 id=\"在文件等外部媒介中的存储方式\"><a href=\"#在文件等外部媒介中的存储方式\" class=\"headerlink\" title=\"在文件等外部媒介中的存储方式\"></a>在文件等外部媒介中的存储方式</h2><p>unicode 字符串在文件等外部媒介中须按照指定的编码方式将字符串转换为原始字节串存储。</p>\n<h1 id=\"字符表示\"><a href=\"#字符表示\" class=\"headerlink\" title=\"字符表示\"></a>字符表示</h1><h2 id=\"python-3-x-1\"><a href=\"#python-3-x-1\" class=\"headerlink\" title=\"python 3.x\"></a>python 3.x</h2><p>在 python 3.x 中，<code>str</code> 类型即可满足日常的字符需求（不论是 ASCII 字符还是国际字符），如下例所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'Natasha, 娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">str</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(a)</div><div class=\"line\"><span class=\"number\">12</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，python 3.x 中得到的 <code>a</code> 的长度为 12（包含空格），没有任何问题；我们可以对 <code>a</code> 进行编码，将其转换为 <code>bytes</code> 类型：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"string\">b'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(b)</div><div class=\"line\">bytes</div></pre></td></tr></table></figure></p>\n<p>从上面可以看出，<code>bytes</code> 类型的对象中的某个字节的取值在 <code>0x00</code> ~ <code>0x7F</code> 时，控制台的输出会显示出其对应的 ASCII 码字符，但其本质上是一个原始字节，不应与任何字符等同。<br>同理，我们也可以将一个 <code>bytes</code> 类型的对象译码为一个 <code>str</code> 类型的对象：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = b.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">'Natasha, 娜塔莎'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"python-2-x-1\"><a href=\"#python-2-x-1\" class=\"headerlink\" title=\"python 2.x\"></a>python 2.x</h2><p>在 python 2.x 中，如果还是用 <code>str</code> 类型来表示国际字符，就会有问题：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'Natasha, 娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">str</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(a)</div><div class=\"line\"><span class=\"number\">18</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a</div><div class=\"line\">Natasha, 娜塔莎</div></pre></td></tr></table></figure></p>\n<p>可以看到，python 2.x 中虽然定义了一个 ASCII 字符和中文字符混合的 <code>str</code> 字符串，但实际上 <code>a</code> 在内存中存储为一串字节序列，且长度也是该字节序列的长度，很明显与我们的定义字符串的初衷不符合。值得注意的是，这里 <code>a</code> 正好是字符串 <code>&#39;Natasha, 娜塔莎&#39;</code> 的 utf-8 编码的结果，且将 <code>a</code> 打印出来的结果和我们的定义初衷相符合，这其实与控制台的默认编码方式有关，这里控制台的默认编码方式正好是 utf-8，获取控制台的默认编码方式的方式如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.stdin.encoding  <span class=\"comment\"># 控制台的输入编码，可解释前例中 a 在内存中的表现形式</span></div><div class=\"line\"><span class=\"string\">'utf-8'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.stdout.encoding <span class=\"comment\"># 控制台的输出编码，可解释前例中打印 a 的显示结果</span></div><div class=\"line\"><span class=\"string\">'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>另外，<code>sys.getdefaultencoding()</code>函数也会得到一种编码方式，得到的结果是系统的默认编码方式，在 python 2.x 中，该函数总是返回 <code>&#39;ascii&#39;</code>, 这表明在对字符串编译码时不指定编码方式时所采用的编码方式为ASCII 编码；除此之外，在 python 2.x 中，ASCII 编码方式还会被用作隐式转换，例如 <code>json.dumps()</code> 函数在默认情况下总是返回一串字节串，不论输入的数据结构里面的字符串是 unicode 类型还是 str 类型。在 python 3.x 中，隐式转换已经被禁止（也可以说，python 3.x 用不到隐式转换：&gt;）。<br>切回正题，在 python 2.x 表示国际字符的正确方式应该是定义一个 <code>unicode</code> 类型字符串，如下所示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">u'Natasha, 娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">unicode</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(a)</div><div class=\"line\"><span class=\"number\">12</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"string\">'Natasha, \\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(b)</div><div class=\"line\">str</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = b.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">u'Natasha, \\u5a1c\\u5854\\u838e'</span></div></pre></td></tr></table></figure></p>\n<p>另外，我们可以对 <code>unicode</code> 类型字符串进行编码操作，对 <code>str</code> 类型字符串进行译码操作。</p>\n<hr>\n<h1 id=\"文本文件操作\"><a href=\"#文本文件操作\" class=\"headerlink\" title=\"文本文件操作\"></a>文本文件操作</h1><h2 id=\"python-3-x-2\"><a href=\"#python-3-x-2\" class=\"headerlink\" title=\"python 3.x\"></a>python 3.x</h2><p>在 python 3.x 中，文本文件的读写过程中的编解码过程可以通过指定 <code>open</code> 函数的参数 <code>encoding</code> 的值来自动进行（python 3.x 中的默认情况下文件的编码方式可以由函数 <code>sys.getfilesystemencoding()</code>得到，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getfilesystemencoding()</div><div class=\"line\"><span class=\"string\">'utf-8'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(a)</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>当然，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 3.6</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'wb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(b)</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"string\">'娜塔莎'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<h2 id=\"python-2-x-2\"><a href=\"#python-2-x-2\" class=\"headerlink\" title=\"python 2.x\"></a>python 2.x</h2><p>在 python 2.x 中，<code>open</code> 函数只支持读写二进制文件或者文件中的字符大小为 1 个 Byte 的文件，写入的数据为字节，读取出来的数据类型为 <code>str</code>；<code>codecs.open</code> 函数则支持自动读写 unicode 文本文件，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> codecs</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">u'安德烈'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = codecs.open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(a)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = codecs.open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> f.read()</div><div class=\"line\">安德烈</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>类似地，也可以先手动将字符串编码为字节串，然后再以二进制模式的方式写入文件，再以二进制模式的方式读取文件，最后再手动将读取出来的数据解码为字符串，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(b)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> f.read().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">安德烈</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>总之，在 python 2.x 中读写文件注意两点，一是从文件读取到数据之后的第一件事就是将其按照合适的编码方式译码，二是当所有操作完成需要写入文件时，一定要将要写入的字符串按照合适的编码方式编码。</p>\n<hr>\n<h1 id=\"python-2-x-中的-json-dumps-操作\"><a href=\"#python-2-x-中的-json-dumps-操作\" class=\"headerlink\" title=\"python 2.x 中的 json.dumps() 操作\"></a>python 2.x 中的 json.dumps() 操作</h1><p>json 作为一种广为各大平台所采用的数据交换格式，在 python 中更是被广泛使用，然而，在 python 2.x 中，有些地方需要注意。<br>对于数据结构中的字符串类型为 <code>str</code>、 但实际上定义的是一个国际字符串的情况，<code>json.dumps()</code> 的结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'Natasha'</span>: <span class=\"string\">'娜塔莎'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_1 = json.dumps(a)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_1</div><div class=\"line\"><span class=\"string\">'&#123;\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_2 = json.dumps(a, ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_2</div><div class=\"line\"><span class=\"string\">'&#123;\"Natasha\": \"\\xe5\\xa8\\x9c\\xe5\\xa1\\x94\\xe8\\x8e\\x8e\"&#125;'</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，在这种情形下，当 <code>ensure_ascii</code> 为 <code>True</code> 时，<code>json.dumps()</code> 操作返回值的类型为 <code>str</code>，其会将 <code>a</code> 中的中文字符映射为其对应的 unicode code point 的形式，但是却是以 ASCII 字符存储的（即 <code>&#39;\\\\u5a1c&#39;</code> 对应 <code>6</code> 个字符而非 <code>1</code> 个）；当 <code>ensure_ascii</code> 为 <code>False</code> 时，<code>json.dumps()</code> 操作的返回值类型仍然为 <code>str</code>，其会将中文字符映射为其对应的某种 unicode 编码（这里为 utf-8）后的字节串，所以我们将 <code>a_json_2</code> 译码就可以得到我们想要的 json：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_json_2.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"string\">u'&#123;\"Natasha\": \"\\u5a1c\\u5854\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a_json_2.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&#123;<span class=\"string\">\"Natasha\"</span>: <span class=\"string\">\"娜塔莎\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>对于数据结构中的字符串类型为 <code>unicode</code> 的情况，<code>json.dumps()</code> 的结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python 2.7</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u = &#123;<span class=\"string\">u'Natasha'</span>: <span class=\"string\">u'娜塔莎'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_1 = json.dumps(u)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_1</div><div class=\"line\"><span class=\"string\">'&#123;\"Natasha\": \"\\\\u5a1c\\\\u5854\\\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_2 = json.dumps(u, ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u_json_2</div><div class=\"line\"><span class=\"string\">u'&#123;\"Natasha\": \"\\u5a1c\\u5854\\u838e\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> u_json_2</div><div class=\"line\">&#123;<span class=\"string\">\"Natasha\"</span>: <span class=\"string\">\"娜塔莎\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>在这种情形下，当 <code>ensure_ascii</code> 为 <code>True</code> 时，<code>json.dumps()</code> 操作返回值的类型为 <code>str</code>，其得到的结果和前面对 a 操作返回的结果完全一样；而当<code>ensure_ascii</code> 为 <code>False</code> 时，<code>json.dumps()</code> 操作的返回值类型变为 <code>unicode</code>，原始数据结构中的中文字符在返回值中完整地保留了下来。<br>对于数据结构中的字符串类型既有 <code>unicode</code> 又有 <code>str</code> 的情形，运用 <code>json.dumps()</code> 时将 <code>ensure_ascii</code> 设为 <code>False</code> 的情况又会完全不同。<br>当数据结构中的 ASCII 字符串为 <code>str</code> 类型，国际字符串为 <code>unicode</code> 类型时（如 <code>u = {&#39;Natasha&#39;: u&#39;娜塔莎&#39;}</code>），<code>json.dumps()</code> 的返回值是正常的、符合预期的 <code>unicode</code> 字符串；<br>当数据结构中有国际字符串为 <code>str</code> 类型，又存在其他字符串为 <code>unicode</code> 类型时（如 <code>u = {u&#39;Natasha&#39;: &#39;娜塔莎&#39;}</code> 或 <code>u = {u&#39;娜塔莉娅&#39;: &#39;娜塔莎&#39;}</code>），<code>json.dumps()</code> 会抛出异常 <code>UnicodeDecodeError</code>，这是因为系统会将数据结构中 <code>str</code> 类型字符串都转换为 <code>unicode</code> 类型，而系统的默认编译码方式为 ascii 编码，因而对 <code>str</code> 类型的国际字符串进行 ascii 译码就必然会出错。</p>\n"}],"PostAsset":[{"_id":"source/_posts/聚类分析（一）：层次聚类算法/a dendrogram.PNG","slug":"a dendrogram.PNG","post":"cjbbkscj0000230nlry61fsbl","modified":0,"renderable":0},{"_id":"source/_posts/聚类分析（一）：层次聚类算法/illustration_for_hierarchical_clustering.PNG","slug":"illustration_for_hierarchical_clustering.PNG","post":"cjbbkscj0000230nlry61fsbl","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjbbkscj0000230nlry61fsbl","category_id":"cjbbkscjp000530nllvbw7kia","_id":"cjbbkscjv000930nll7ziybgz"},{"post_id":"cjbbkscjl000430nl80kq3n0b","category_id":"cjbbkscjt000730nln36aozo6","_id":"cjbbkscjw000b30nljm1i5nhy"}],"PostTag":[{"post_id":"cjbbkscj0000230nlry61fsbl","tag_id":"cjbbkscjr000630nlunna3csr","_id":"cjbbkscjx000d30nlyne28xvj"},{"post_id":"cjbbkscj0000230nlry61fsbl","tag_id":"cjbbkscju000830nl86zqllaa","_id":"cjbbkscjx000e30nlth7gh8sb"},{"post_id":"cjbbkscj0000230nlry61fsbl","tag_id":"cjbbkscjv000a30nlcwmfyq4w","_id":"cjbbkscjx000g30nlx63lv74o"},{"post_id":"cjbbkscjl000430nl80kq3n0b","tag_id":"cjbbkscjw000c30nltp4i8fwp","_id":"cjbbkscjy000h30nljnk1r16q"},{"post_id":"cjbbkscjl000430nl80kq3n0b","tag_id":"cjbbkscjx000f30nld2577342","_id":"cjbbkscjy000i30nlbatipio0"}],"Tag":[{"name":"聚类","_id":"cjbbkscjr000630nlunna3csr"},{"name":"非监督学习","_id":"cjbbkscju000830nl86zqllaa"},{"name":"层次聚类","_id":"cjbbkscjv000a30nlcwmfyq4w"},{"name":"python","_id":"cjbbkscjw000c30nltp4i8fwp"},{"name":"unicode","_id":"cjbbkscjx000f30nld2577342"}]}}